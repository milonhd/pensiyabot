import logging
import time
import asyncio
import os
import pdfplumber
import re
from aiogram import F
from datetime import datetime, timedelta
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.filters import Command
from aiogram.enums import ChatType
from aiogram.types import FSInputFile
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import BotCommandScopeAllPrivateChats
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv
from database import DATABASE_URL, create_db_pool, close_db_pool, init_db, get_db_connection
from reviews import register_reviews_handlers

load_dotenv()

API_TOKEN = os.environ.get('API_TOKEN')
if not API_TOKEN:
    logging.error("API_TOKEN –±—ã–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    exit(1) 

ADMIN_ID = 957724800

GROUP_IDS = [-1002583988789, -1002529607781, -1002611068580, -1002607289832, -1002560662894, -1002645685285, -1002529375771, -1002262602915]
RECEIPT_DIR = "/app/receipts"

os.makedirs(RECEIPT_DIR, exist_ok=True)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone="UTC")

register_reviews_handlers(dp, bot)

class BroadcastStates(StatesGroup):
    waiting_content = State()
    waiting_confirm = State()
    waiting_time = State()

db_pool = None

main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–£—Ä–æ–≤–µ–Ω—å –°–ê–ú–û–°–¢–û–Ø–¢–ï–õ–¨–ù–´–ô", callback_data="self")],
    [InlineKeyboardButton(text="–£—Ä–æ–≤–µ–Ω—å –ë–ê–ó–û–í–´–ô", callback_data="basic")],
    [InlineKeyboardButton(text="–£—Ä–æ–≤–µ–Ω—å –ü–†–û", callback_data="pro")],
])

materials_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üè∞ –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="get_materials"),
    [InlineKeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"start_review_{user_id}")]
])

def get_self_years_keyboard():
    builder = InlineKeyboardBuilder()
    for year in range(2025, 2032):
        builder.button(text=f"–ü–µ–Ω—Å–∏—è {year}", callback_data=f"year_{year}")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")
    builder.adjust(2)
    return builder.as_markup()

@dp.callback_query(F.data == "menu")
async def handle_back_to_menu(call: types.CallbackQuery):
    try:
        await call.message.edit_text(
            "üëá –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å:",
            reply_markup=main_keyboard
        )
        await call.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ '–ù–∞–∑–∞–¥': {e}")

def get_year_buttons(year):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å", url="https://pay.kaspi.kz/pay/vx2s6z0c")],
        [InlineKeyboardButton(text="üìÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫", callback_data=f"send_screenshot_{year}")]
    ])

@dp.message(Command("start"), F.chat.type == ChatType.PRIVATE)
async def cmd_start(message: types.Message):
    await save_user(message.from_user)
    user = message.from_user
    name = user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    main_kb = ReplyKeyboardBuilder()
    main_kb.button(text="üìÑ –ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞")
    main_kb.button(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    main_kb.button(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    
    if message.from_user.id == ADMIN_ID:
        main_kb.button(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
    
    main_kb.adjust(2)  
    
    if message.from_user.id == ADMIN_ID:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.",  reply_markup=main_kb.as_markup(resize_keyboard=True, one_time_keyboard=False))
    else:
        expire_time, _ = await get_user_access(message.from_user.id)
        if expire_time and expire_time > datetime.now():
            await message.answer(f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}! –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø.", reply_markup=main_kb.as_markup(resize_keyboard=True, one_time_keyboard=False))
        else:
            welcome_text = (
               f"üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}, –≤ –±–æ—Ç ¬´–°–í–û–Ø –ü–ï–ù–°–ò–Ø¬ª* ‚Äì —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ –ø—É—Ç–∏ –∫ –¥–æ—Å—Ç–æ–π–Ω–æ–π –ø–µ–Ω—Å–∏–∏!\n"
                "–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å –≤—Å—ë, —á—Ç–æ–±—ã –ø–æ–Ω–∏–º–∞—Ç—å –Ω–∞ –∫–∞–∫—É—é –ø–µ–Ω—Å–∏—é —Ç—ã –º–æ–∂–µ—à—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å, –∫–∞–∫ –µ—ë —É–≤–µ–ª–∏—á–∏—Ç—å –∏ –∫–∞–∫–∏–µ –≤—ã–ø–ª–∞—Ç—ã —Ç–µ–±–µ –ø–æ–ª–æ–∂–µ–Ω—ã –∏–º–µ–Ω–Ω–æ –≤ —Ç–≤–æ–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏. "
                "–ü–æ–ª—É—á–∏—à—å –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å—á–µ—Ç–∞ –ø–µ–Ω—Å–∏–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫ —Ç–≤–æ–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏.\n\n"

                "üëâ *–í–Ω—É—Ç—Ä–∏ —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω–æ:*\n"
                "1Ô∏è‚É£ –†–∞–∑–±–æ—Ä—ã –ø–µ–Ω—Å–∏–π –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ: –∫—Ç–æ, –∫–æ–≥–¥–∞ –∏ —Å–∫–æ–ª—å–∫–æ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å\n"
                "2Ô∏è‚É£ –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º: —Ç–µ–∫—Å—Ç, –≤–∏–¥–µ–æ, —Ñ–æ—Ç–æ ‚Äî –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞\n\n"

                "üí∞ *–£—Ä–æ–≤–Ω–∏:*\n"
                "*–°–ê–ú–û–°–¢–û–Ø–¢–ï–õ–¨–ù–´–ô* ‚Äî 10 000 —Ç–≥\n"
                "*–ë–ê–ó–û–í–´–ô* ‚Äî 50 000 —Ç–≥\n"
                "*–ü–†–û* ‚Äî 250 000 —Ç–≥\n\n"

                "–¢—ã –º–æ–∂–µ—à—å –æ–ø–ª–∞—Ç–∏—Ç—å –ø—Ä—è–º–æ –∑–¥–µ—Å—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –æ–ø–ª–∞—Ç—ã. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø, –∏ –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ *–ü–û–õ–£–ß–ò–¢–¨ –ú–ê–¢–ï–†–ò–ê–õ–´*.\n\n"

                "–¢—ã –Ω–µ –æ–¥–∏–Ω ‚Äî –¥–∞–≤–∞–π —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ!\n"
            )
            await message.answer(welcome_text, parse_mode="Markdown", reply_markup=main_kb.as_markup(resize_keyboard=True, one_time_keyboard=False))
            await message.answer(
                "üëá –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å:",
                reply_markup=main_keyboard  
            )


@dp.message(Command("g"), F.chat.type == ChatType.PRIVATE)
async def grant_access(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    args = message.text.split()
    if len(args) < 3:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /g [id] [basic/pro/2025-2031]")

    try:
        user_id = int(args[1])
        tariff = args[2].lower()

        duration_map = {
            "self": 7,
            "basic": 30,
            "pro": 60,
            **{str(year): 7 for year in range(2025, 2032)} 
        }

        if tariff not in duration_map:
            return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: basic, pro, 2025-2031")

        duration_days = duration_map[tariff]

        success = await set_user_access(user_id, duration_days, tariff)
        
        if success:
            expire_date = (datetime.now() + timedelta(days=duration_days)).strftime("%d.%m.%Y %H:%M")
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤—ã–¥–∞–Ω –¥–æ—Å—Ç—É–ø –¥–æ {expire_date} ({tariff.upper()})")
            await bot.send_message(user_id, f"‚úÖ –î–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º —É—Ä–æ–≤–Ω—è {tariff.upper()} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–æ {expire_date}!",
            reply_markup=materials_keyboard
        )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –¥–æ—Å—Ç—É–ø–∞")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ /g: {e}")
        await message.answer("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")

@dp.message(Command("revoke"), F.chat.type == ChatType.PRIVATE)
async def revoke_access(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    args = message.text.split()
    if len(args) < 2:
        return await message.answer("–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    try:
        user_id = int(args[1])
        expire_time, _ = await get_user_access(user_id)
        
        if expire_time:
            await revoke_user_access(user_id)
            await bot.send_message(user_id, "‚ùå –í–∞—à –¥–æ—Å—Ç—É–ø –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã.")

            await bot.send_message(ADMIN_ID, f"–î–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω.")

            for group_id in GROUP_IDS:
                try:
                    await bot.ban_chat_member(group_id, user_id)
                    await bot.unban_chat_member(group_id, user_id)  
                    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã {group_id}")
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥—Ä—É–ø–ø—ã {group_id}: {e}")
        
        else:
            await message.answer("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@dp.message(Command("status"), F.chat.type == ChatType.PRIVATE)
async def check_status(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    args = message.text.split()
    if len(args) < 2:
        return await message.answer("–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    try:
        user_id = int(args[1])
        expire_time, tariff = await get_user_access(user_id)
        
        if expire_time and expire_time > datetime.now():
            remaining = expire_time - datetime.now()
            days = remaining.days
            formatted_time = expire_time.strftime('%H:%M %d.%m.%Y')

            if tariff:
                await message.answer(
                    f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø ({tariff.upper()}). –ò—Å—Ç–µ–∫–∞–µ—Ç: {formatted_time}."
                )
            else:
                await message.answer(
                    f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø. –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days}, –Ω–æ —Ç–∞—Ä–∏—Ñ –Ω–µ —É–∫–∞–∑–∞–Ω."
                )
        else:
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω –∏—Å—Ç–µ–∫.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞.")

@dp.message(Command("help"), F.chat.type == ChatType.PRIVATE)
async def help_admin(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    await message.answer("""
/g [id] [basic/pro/2025-2031] - –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø
/revoke [id] - –æ—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø
/status [id] - —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
/help - –∫–æ–º–∞–Ω–¥—ã
    """)

@dp.message(Command("stats"), F.chat.type == ChatType.PRIVATE)
async def show_stats(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    
    try:
        stats = await get_stats()
     
        tariff_text = ""
        for tariff, count in stats['tariff_stats']:
            if tariff:
                tariff_display = {
                    'basic': '–ë–ê–ó–û–í–´–ô',
                    'pro': '–ü–†–û', 
                    'self': '–°–ê–ú–û–°–¢–û–Ø–¢–ï–õ–¨–ù–´–ô'
                }.get(tariff, f'–ì–æ–¥ {tariff}' if tariff.isdigit() else tariff.upper())
                tariff_text += f"  ‚Ä¢ {tariff_display}: {count}\n"
      
        popular_text = ""
        for tariff, count in stats['popular_tariffs'][:5]:  
            if tariff:
                tariff_display = {
                    'basic': '–ë–ê–ó–û–í–´–ô',
                    'pro': '–ü–†–û',
                    'self': '–°–ê–ú–û–°–¢–û–Ø–¢–ï–õ–¨–ù–´–ô'
                }.get(tariff, f'–ì–æ–¥ {tariff}' if tariff.isdigit() else tariff.upper())
                popular_text += f"  ‚Ä¢ {tariff_display}: {count} —á–µ–∫–æ–≤\n"
        
        stats_text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {stats['total_users']}
  ‚Ä¢ –° –∞–∫—Ç–∏–≤–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º: {stats['active_users']}
  ‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {stats['new_users_30d']}
  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats['active_7d']}

üí≥ **–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:**
{tariff_text if tariff_text else '  ‚Ä¢ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤'}

üìÑ **–ß–µ–∫–∏:**
  ‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞ –º–µ—Å—è—Ü: {stats['receipts_30d']}

üî• **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã (–º–µ—Å—è—Ü):**
{popular_text if popular_text else '  ‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}

üìà **–ö–æ–Ω–≤–µ—Ä—Å–∏—è:**
  ‚Ä¢ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {round(stats['active_users']/stats['total_users']*100 if stats['total_users'] > 0 else 0, 1)}%
  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é: {round(stats['active_7d']/stats['total_users']*100 if stats['total_users'] > 0 else 0, 1)}%
"""
        
        await message.answer(stats_text, parse_mode="Markdown")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@dp.callback_query(lambda c: c.data.startswith("year_"))
async def handle_year_selection(call: types.CallbackQuery):
    year = call.data.split("_")[1]
    
    text = """
üîπ –£—Ä–æ–≤–µ–Ω—å –°–ê–ú–û–°–¢–û–Ø–¢–ï–õ–¨–ù–´–ô ‚Äî —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ—é –±—É–¥—É—â—É—é –ø–µ–Ω—Å–∏—é –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ä–∞—Å—á—ë—Ç–æ–≤

üìå –ü–æ–¥—Ö–æ–¥–∏—Ç, –µ—Å–ª–∏:
‚Äì –Ω–µ –¥—Ä—É–∂–∏—Ç–µ —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏, Excel, –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –≥–æ—Å–æ—Ä–≥–∞–Ω–æ–≤
‚Äì –ø—Ä–æ—Å—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–Ω—è—Ç—å, –ø–æ—á–µ–º—É —É –≤–∞—Å –±—É–¥–µ—Ç —Ç–∞–∫–∞—è –ø–µ–Ω—Å–∏—è
‚Äì —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, —á—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–∞–∑–º–µ—Ä –ø–µ–Ω—Å–∏–∏ –∏ –º–æ–∂–Ω–æ –ª–∏ —á—Ç–æ-—Ç–æ —É–ª—É—á—à–∏—Ç—å

üìö –í—ã –ø–æ–ª—É—á–∏—Ç–µ:
‚úîÔ∏è –ì–æ—Ç–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –ø–æ–Ω—è—Ç–Ω–æ–π —Ñ–æ—Ä–º–µ ‚Äî —Ç–∞–±–ª–∏—Ü—ã –∏ –≤–∏–¥–µ–æ
‚úîÔ∏è –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö, –±–µ–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π
‚úîÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: —á—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –≥–¥–µ –≤–∑—è—Ç—å –¥–∞–Ω–Ω—ã–µ, –∫–∞–∫ –Ω–µ —É–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω–æ–µ
‚úîÔ∏è –ö–æ–Ω–µ—á–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å —Ä–∞—Å—á–µ—Ç–æ–º –≤–∞—à–µ–π –ø–µ–Ω—Å–∏–∏

‚è∞ –î–æ—Å—Ç—É–ø: 7 –¥–Ω–µ–π
üí¨ –í–æ–ø—Ä–æ—Å—ã ‚Äî –≤ –æ–±—â–µ–º —á–∞—Ç–µ –º–æ–∂–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é —Ç–∞–±–ª–∏—Ü—ã
üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: 10 000 ‚Ç∏

üëá –ù–∞–∂–º–∏—Ç–µ ¬´‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º.
"""
    
    await call.message.answer(text, reply_markup=get_year_buttons(year))

@dp.callback_query(F.data.startswith("send_screenshot_"))
async def handle_screenshot(call: types.CallbackQuery):
    user_id = call.from_user.id
    expire_time, current_tariff = await get_user_access(user_id)
 
    if expire_time and expire_time > datetime.now():
        await call.answer("‚ùó –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø!", show_alert=True)
        return
    
    selected_tariff_or_year = call.data.split("_")[2]
    
    duration_map = {
        "basic": 30,
        "pro": 60,
        **{str(year): 7 for year in range(2025, 2032)} 
    }
 
    duration_days = duration_map.get(selected_tariff_or_year, 7)
    
    await set_user_access(user_id, duration_days, selected_tariff_or_year)
  
    await call.message.answer(
        "üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª —Ñ–∏—Å–∫–∞–ª—å–Ω–æ–≥–æ —á–µ–∫–∞ –∏–∑ Kaspi!\n\n"
        "üìå –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —á–µ–∫:\n"
        "1. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤ Kaspi –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–∫–∞–∑–∞—Ç—å —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ¬ª\n"
        "2. –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è¬ª\n"
        "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –≤ —ç—Ç–æ—Ç —á–∞—Ç\n\n"
    )

@dp.callback_query(
    F.data.in_([
        "self", "basic", "pro", "offer",
        "send_screenshot_basic", "send_screenshot_pro",  
        "get_materials", "used_link"
    ])
)
async def handle_callback(call: types.CallbackQuery):
    if call.message.chat.type != ChatType.PRIVATE:
        return 
    
    data = call.data
    user_id = call.from_user.id

    if data == "self":
        await call.message.answer("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –≤–∞—à–µ–≥–æ –≤—ã—Ö–æ–¥–∞ –Ω–∞ –ø–µ–Ω—Å–∏—é:", reply_markup=get_self_years_keyboard())
        return

    if data == "basic":
        await set_user_access(user_id, None, "basic")  
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å", url="https://pay.kaspi.kz/pay/vx2s6z0c")],
            [InlineKeyboardButton(text="üìÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫", callback_data="send_screenshot_basic")]
        ])
        await call.message.answer(
        """
üî∏ –£—Ä–æ–≤–µ–Ω—å –ë–ê–ó–û–í–´–ô ‚Äî –º–∏–Ω–∏-–∫—É—Ä—Å –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–Ω–∏–º–∞—Ç—å —Ä–∞—Å—á—ë—Ç –ø–µ–Ω—Å–∏–∏ –∏ –ø–æ–º–æ–≥–∞—Ç—å –¥—Ä—É–≥–∏–º

üìö –í—ã –ø–æ–ª—É—á–∏—Ç–µ:
‚úîÔ∏è –ì–æ—Ç–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å—á—ë—Ç–∞ –ø–µ–Ω—Å–∏–∏ ‚Äî –ø–æ—à–∞–≥–æ–≤–æ, –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª
‚úîÔ∏è –ü—Ä–∏–º–µ—Ä—ã –∏ —à–∞–±–ª–æ–Ω—ã ‚Äî –∫–∞–∫ —Å—á–∏—Ç–∞—Ç—å, –≥–¥–µ –±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
‚úîÔ∏è –í–∏–¥–µ–æ + —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã ‚Äî –≤—Å—ë –ø–æ –¥–µ–ª—É
‚úîÔ∏è –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞—Å—á—ë—Ç—É (–µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ ‚Äî —Ä–∞–∑–±–µ—Ä—ë–º)

üß† –ü–æ–¥—Ö–æ–¥–∏—Ç —Ç–µ–º, –∫—Ç–æ:
‚Äì —Ö–æ—á–µ—Ç —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ —Ç–µ–º–µ –¥–ª—è —Å–µ–±—è –∏ –±–ª–∏–∑–∫–∏—Ö
‚Äì –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –ø–æ–º–æ–≥–∞—Ç—å –¥—Ä—É–≥–∏–º (–∫–∞–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∏–ª–∏ –ø–æ–º–æ—â–Ω–∏–∫)
‚Äì –Ω–µ —Ö–æ—á–µ—Ç —Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω—é–∞–Ω—Å–æ–≤

‚è∞ –î–æ—Å—Ç—É–ø: 30 –¥–Ω–µ–π
üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –≤ –æ–±—â–µ–º —á–∞—Ç–µ
üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: 50 000 ‚Ç∏

üëá –ù–∞–∂–º–∏—Ç–µ ¬´‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º.
        """,
        reply_markup=keyboard)

    elif data == "pro":
        await set_user_access(user_id, None, "pro")  
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å", url="https://pay.kaspi.kz/pay/vx2s6z0c")],
            [InlineKeyboardButton(text="üìÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫", callback_data="send_screenshot_pro")]
        ])
        await call.message.answer("‚ùå –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", reply_markup=keyboard)
    
    elif data == "get_materials":
        await call.answer()
        await call.message.edit_reply_markup(
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(
                        text="‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ–ª—É—á–µ–Ω—ã", 
                        callback_data="used_link"
                    )]
                ]
            )
        )
        expire_time, tariff = await get_user_access(user_id)
        if not expire_time or expire_time < datetime.now():
            return await call.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.")

        tariff_chat_map = {
            "basic": -1002583988789,
            "2025": -1002529607781,
            "2026": -1002611068580,
            "2027": -1002607289832,
            "2028": -1002560662894,
            "2029": -1002645685285,
            "2030": -1002529375771,
            "2031": -1002262602915
        }

        chat_id = tariff_chat_map.get(tariff)
        if not chat_id:
            return await call.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–Ω–∞–ª –ø–æ –≤–∞—à–µ–º—É —Ç–∞—Ä–∏—Ñ—É.")

        try:
            invite = await bot.create_chat_invite_link(
                chat_id=chat_id,
                member_limit=1,
                expire_date=int(time.time()) + 20,
                creates_join_request=False
            )
  
            msg = await call.message.answer(
                f"üîê –í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ (–∏—Å—á–µ–∑–Ω–µ—Ç —Å–ø—É—Å—Ç—è 20 —Å–µ–∫—É–Ω–¥):\n{invite.invite_link}"
            )
            
            await asyncio.sleep(20)
            try:
                await msg.delete()
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
            await call.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏.")

@dp.callback_query(F.data == "used_link")
async def handle_used_link(call: types.CallbackQuery):
    await call.answer("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç—É —Å—Å—ã–ª–∫—É", show_alert=True)

async def parse_kaspi_receipt(pdf_path: str):
    try:
        with pdfplumber.open(pdf_path) as pdf:
            text = "\n".join(page.extract_text() for page in pdf.pages)
            
            data = {
                "amount": float(re.search(r"(\d+)\s*‚Ç∏", text).group(1)) if re.search(r"(\d+)\s*‚Ç∏", text) else None,
                "iin": re.search(r"–ò–ò–ù/–ë–ò–ù –ø—Ä–æ–¥–∞–≤—Ü–∞\s*(\d+)", text).group(1) if re.search(r"–ò–ò–ù/–ë–ò–ù –ø—Ä–æ–¥–∞–≤—Ü–∞\s*(\d+)", text) else None,
                "check_number": re.search(r"‚Ññ —á–µ–∫–∞\s*(\S+)", text).group(1) if re.search(r"‚Ññ —á–µ–∫–∞\s*(\S+)", text) else None,
                "fp": re.search(r"–§–ü\s*(\d+)", text).group(1) if re.search(r"–§–ü\s*(\d+)", text) else None,
                "date_time": re.search(r"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è\s*(?:–ø–æ –ê—Å—Ç–∞–Ω–µ)?\s*(\d{2}\.\d{2}\.\d{4} \d{2}:\d{2})"
, text).group(1) if re.search(r"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è\s*(?:–ø–æ –ê—Å—Ç–∞–Ω–µ)?\s*(\d{2}\.\d{2}\.\d{4} \d{2}:\d{2})"
, text) else None,
                "buyer_name": re.search(r"–§–ò–û –ø–æ–∫—É–ø–∞—Ç–µ–ª—è\s*(.+)", text).group(1).strip() if re.search(r"–§–ò–û –ø–æ–∫—É–ø–∞—Ç–µ–ª—è\s*(.+)", text) else None
            }
            return data
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ PDF: {e}")
        return None

@dp.message(F.document, F.chat.type == ChatType.PRIVATE)
async def handle_document(message: types.Message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {message.document.file_name}")
    user = message.from_user
    
    if not message.document.mime_type == 'application/pdf':
        return await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª —á–µ–∫–∞ –∏–∑ Kaspi")

    file_id = message.document.file_id
    if await check_duplicate_file(file_id):
        return await message.answer("‚ùå –≠—Ç–æ—Ç —á–µ–∫ —É–∂–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω —Ä–∞–Ω–µ–µ")
  
    file_path = os.path.join(RECEIPT_DIR, f"{user.id}_{message.document.file_name}")
    await bot.download(file=await bot.get_file(file_id), destination=file_path)

    receipt_data = await parse_kaspi_receipt(file_path)
    
    if not receipt_data:
        return await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —á–µ–∫. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª.")
  
    required_fields = ["amount", "check_number", "fp", "date_time", "iin", "buyer_name"]
    missing_fields = [field for field in required_fields if receipt_data.get(field) is None]
    
    if missing_fields:
        return await message.answer(
            f"‚ùå –í —á–µ–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {', '.join(missing_fields)}.\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —á–µ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
        )
    
    try:
        date_time = datetime.strptime(receipt_data["date_time"], "%d.%m.%Y %H:%M")
    except ValueError as e:
        return await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã —á–µ–∫–∞: {e}")

    await message.answer(
        f"üìÑ –î–∞–Ω–Ω—ã–µ —á–µ–∫–∞:\n"
        f"–ò–ò–ù: {receipt_data['iin']}\n"
        f"–°—É–º–º–∞: {receipt_data['amount']}\n"
        f"–ù–æ–º–µ—Ä —á–µ–∫–∞: {receipt_data['check_number']}\n"
        f"–î–∞—Ç–∞: {receipt_data['date_time']}"
    )
    
    expire_time, tariff = await get_user_access(user.id)
    required_amounts = {
        "self": 10000,
        "basic": 50000,
        "pro": 250000,
        "2025": 10000,
        "2026": 10000,
        "2027": 10000,
        "2028": 10000,
        "2029": 10000,
        "2030": 10000,
        "2031": 10000
    }

    errors = []
    if receipt_data["iin"] != "620613400018":
        errors.append("–ò–ò–ù –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
        
    if receipt_data["amount"] != required_amounts.get(tariff, 0):
        errors.append(f"–°—É–º–º–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–∞—Ä–∏—Ñ—É {tariff}")

    if errors:
        return await message.answer("‚ùå –û—à–∏–±–∫–∏ –≤ —á–µ–∫–µ:\n" + "\n".join(errors))

    if not await save_receipt(
        user_id=user.id,
        amount=receipt_data["amount"],
        check_number=receipt_data["check_number"],
        fp=receipt_data["fp"],
        date_time=date_time,
        buyer_name=receipt_data["buyer_name"],
        file_id=file_id
    ):
        return await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–µ–∫–∞")

    if tariff in ["self", "basic", "pro"] + [str(y) for y in range(2025, 2032)]:
        duration = {
            "self": 7,
            "basic": 30,
            "pro": 60,
            **{str(y): 7 for y in range(2025, 2032)}
        }.get(tariff, 7) * 86400
        
        await set_user_access(user.id, time.time() + duration, tariff)
        await message.answer(
            f"‚úÖ –î–æ—Å—Ç—É–ø —É—Ä–æ–≤–Ω—è {tariff.upper()} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ {duration//86400} –¥–Ω–µ–π!",
            reply_markup=materials_keyboard
        )

    info = (
        f"üìÑ –§–∏—Å–∫–∞–ª—å–Ω—ã–π —á–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        f"üÜî ID: {user.id}\n"
        f"üë§ Username: @{user.username or '–ë–µ–∑ username'}\n"
        f"üí≥ –£—Ä–æ–≤–µ–Ω—å: {tariff.upper() if tariff else '–Ω–µ –≤—ã–±—Ä–∞–Ω'}\n"
        f"üìù –§–∞–π–ª: {message.document.file_name}"
    )
    
    await bot.send_message(ADMIN_ID, info)
    await bot.send_document(ADMIN_ID, message.document.file_id)
    
@dp.message(F.new_chat_members)
async def remove_join_message(message: types.Message):
    try:
        await message.delete()
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å join-—Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

@dp.message(F.left_chat_member)
async def remove_leave_message(message: types.Message):
    try:
        await message.delete()
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å leave-—Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

GROUP_IDS = [-1002583988789, -1002529607781, -1002611068580, -1002607289832, -1002560662894, -1002645685285, -1002529375771, -1002262602915]  

async def check_access_periodically():
    while True:
        try:
            expired_users = await get_expired_users()

            for user_id, tariff in expired_users:
                await revoke_user_access(user_id)
                
                for group_id in GROUP_IDS:
                    try:
                        await bot.ban_chat_member(group_id, user_id) 
                        await bot.unban_chat_member(group_id, user_id)  
                        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã {group_id}")
                    except Exception as e:
                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ –≥—Ä—É–ø–ø—ã {group_id}: {e}")

                try:
                    await bot.send_message(user_id, "‚ùå –í–∞—à –¥–æ—Å—Ç—É–ø –∏—Å—Ç—ë–∫. –í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –≥—Ä—É–ø–ø—ã.")
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

                try:
                    await bot.send_message(
                        ADMIN_ID,
                        f"‚õîÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ –≥—Ä—É–ø–ø, –¥–æ—Å—Ç—É–ø –∏—Å—Ç—ë–∫ ({tariff})."
                    )
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

                await revoke_user_access(user_id)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞: {e}")

        await asyncio.sleep(10)

@dp.callback_query(lambda c: c.data.startswith("approve_"))
async def approve_user(call: types.CallbackQuery):
    if call.from_user.id != ADMIN_ID:
        return await call.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")

    user_id = int(call.data.split("_")[1])
    _, tariff = await get_user_access(user_id)

    global db_pool  
    if not db_pool:
        await create_db_pool()

    async with db_pool.acquire() as conn:  
        async with conn.cursor() as cur:
                await cur.execute("SELECT 1 FROM fiscal_checks WHERE user_id = %s", (user_id,))
                if not await cur.fetchone():
                    return await call.answer("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ —á–µ–∫–∞")

    if not tariff:
        return await call.answer("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –≤—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ!")

    if tariff == "basic":
        duration = 30 * 86400
    elif tariff == "pro":
        duration = 60 * 86400
    elif tariff in [str(y) for y in range(2025, 2032)]:
        duration = 7 * 86400
    else:
        return await call.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ.")

    expire_time = datetime.now() + timedelta(seconds=duration)
    await set_user_access(user.id, expire_time, tariff)

    with open("access_log.txt", "a", encoding="utf-8") as f:
        f.write(f"{user_id} | {tariff} | {time.ctime()} | {duration // 86400} –¥–Ω–µ–π\n")

    await bot.send_message(user_id, f"‚úÖ –î–æ—Å—Ç—É–ø —É—Ä–æ–≤–Ω—è {tariff.upper()} –≤—ã–¥–∞–Ω –Ω–∞ {duration // 86400} –¥–Ω–µ–π!", reply_markup=materials_keyboard)

    await call.message.edit_reply_markup(reply_markup=None)
    await call.answer("–î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω.")

async def check_subscriptions():
    while True:
        users = await get_all_active_users()
        for user_id, expire_time, _ in users:
            if (expire_time - time.time()) < 86400 * 3: 
                await bot.send_message(
                    user_id,
                    f"‚ö†Ô∏è –í–∞—à –¥–æ—Å—Ç—É–ø –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è!",
                    reply_markup=main_keyboard
                )
        await asyncio.sleep(3600) 

@dp.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", F.chat.type == ChatType.PRIVATE)
async def handle_profile(message: types.Message):
    await save_user(message.from_user) 
    
    expire_time, tariff = await get_user_access(message.from_user.id)
    user = message.from_user
    
    profile_text = (
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üÜî ID: {user.id}\n"
        f"üë§ –ò–º—è: {user.full_name}\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {datetime.now().strftime('%d.%m.%Y')}\n\n"
    )
    
    if expire_time and expire_time > datetime.now():
        expire_date = expire_time.strftime("%d.%m.%Y %H:%M")
        profile_text += (
            f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞</b>\n"
            f"üìå –£—Ä–æ–≤–µ–Ω—å: {tariff.upper() if tariff else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìÜ –ò—Å—Ç–µ–∫–∞–µ—Ç: {expire_date}"
        )
    else:
        profile_text += "‚ùå <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞</b>\n\nüëâ –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–∞–Ω–¥–æ–π /start"
    
    await message.answer(profile_text, parse_mode="HTML")

@dp.message(F.text == "üìÑ –ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞", F.chat.type == ChatType.PRIVATE)
async def handle_offer_button(message: types.Message):
    pdf_path = "oferta.pdf"
    try:
        document = FSInputFile(pdf_path)
        await message.answer_document(document)
    except Exception as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: " + str(e))

@dp.message(F.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", F.chat.type == ChatType.PRIVATE)
async def handle_support_button(message: types.Message):
    support_msg = """
üìû <b>–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>

–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å:
üëâ WhatsApp: <a href="https://wa.me/77754850900">+7 775 485 09 00</a>
‚è∞ –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: –ü–Ω-–ü—Ç, 10:00-22:00
    """
    await message.answer(support_msg, parse_mode="HTML")

@dp.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞", F.chat.type == ChatType.PRIVATE)
async def start_broadcast(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", reply_markup=types.ReplyKeyboardRemove())
    
    cancel_kb = ReplyKeyboardBuilder()
    cancel_kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
    cancel_kb.adjust(2)
    
    await message.answer(
        "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ):",
        reply_markup=cancel_kb.as_markup(resize_keyboard=True)
    )
    await state.set_state(BroadcastStates.waiting_content)

@dp.message(BroadcastStates.waiting_content)
async def process_content(message: types.Message, state: FSMContext):
    content = {
        'text': message.html_text if message.text else message.caption if message.caption else "",
        'photo': message.photo[-1].file_id if message.photo else None,
        'video': message.video.file_id if message.video else None,
        'document': message.document.file_id if message.document else None
    }
    
    if not any(content.values()):
        return await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    
    await state.update_data(content=content)
    
    confirm_kb = ReplyKeyboardBuilder()
    confirm_kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
    confirm_kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
    confirm_kb.adjust(2)

    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
            await state.clear()
            await show_main_menu(message, "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
    
    preview_text = "üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n" + content['text']
    try:
        if content['photo']:
            await message.answer_photo(content['photo'], caption=preview_text)
        elif content['video']:
            await message.answer_video(content['video'], caption=preview_text)
        elif content['document']:
            await message.answer_document(content['document'], caption=preview_text)
        else:
            await message.answer(preview_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")
        return await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=confirm_kb.as_markup(resize_keyboard=True)
    )
    await state.set_state(BroadcastStates.waiting_confirm)

@dp.message(BroadcastStates.waiting_confirm)
async def confirm_broadcast(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await show_main_menu(message, "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
    
    if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É":
        await send_broadcast(message, state)
        return
    
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è")

async def show_main_menu(message: types.Message, text: str = None):
    main_kb = ReplyKeyboardBuilder()
    main_kb.button(text="üìÑ –ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞")
    main_kb.button(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    main_kb.button(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    
    if message.from_user.id == ADMIN_ID:
        main_kb.button(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
    
    main_kb.adjust(2)
    
    if text:
        await message.answer(text, reply_markup=main_kb.as_markup(resize_keyboard=True))
    else:
        await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb.as_markup(resize_keyboard=True))

async def send_broadcast(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if 'content' not in data:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return
 
    users = await get_all_users()
    if not users:
        await message.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return
   
    progress_msg = await message.answer("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    success = 0
    errors = 0
    total_users = len(users)
 
    for index, user_id in enumerate(users, 1):
        try:
            content = data['content']
      
            if content.get('photo'):
                await bot.send_photo(
                    chat_id=user_id,
                    photo=content['photo'],
                    caption=content.get('text', ''),
                    parse_mode='HTML'
                )
            elif content.get('video'):
                await bot.send_video(
                    chat_id=user_id,
                    video=content['video'],
                    caption=content.get('text', ''),
                    parse_mode='HTML'
                )
            elif content.get('document'):
                await bot.send_document(
                    chat_id=user_id,
                    document=content['document'],
                    caption=content.get('text', ''),
                    parse_mode='HTML'
                )
            else:
                await bot.send_message(
                    chat_id=user_id,
                    text=content.get('text', ''),
                    parse_mode='HTML'
                )
            
            success += 1
       
            if index % 10 == 0 or index == total_users:
                progress = int(index / total_users * 100)
                await progress_msg.edit_text(
                    f"üîÑ –†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...\n"
                    f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%\n"
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n"
                    f"‚ùå –û—à–∏–±–æ–∫: {errors}"
                )
                
        except Exception as e:
            errors += 1
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
         
            await asyncio.sleep(1)
  
    try:
        await progress_msg.delete()
    except:
        pass
  
    report_message = (
        f"üìä –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {errors}\n"
        f"üìà –£—Å–ø–µ—à–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–æ–∫: {int(success/total_users*100)}%"
    )

    await message.answer(report_message, reply_markup=types.ReplyKeyboardRemove())
    await state.clear()

async def execute_scheduled_broadcast(content: dict):
    users = await get_all_users()
    for user_id in users:
        try:
            if content['photo']:
                await bot.send_photo(user_id, content['photo'], caption=content['text'])
            elif content['video']:
                await bot.send_video(user_id, content['video'], caption=content['text'])
            elif content['document']:
                await bot.send_document(user_id, content['document'], caption=content['text'])
            else:
                await bot.send_message(user_id, content['text'])
        except Exception as e:
            logger.error(f"Scheduled broadcast error: {str(e)}")

@dp.message(F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP}))
async def ignore_group_messages(message: types.Message):
    pass  

async def delete_bot_commands():
    await bot.delete_my_commands(scope=BotCommandScopeAllPrivateChats())
   
    await bot.delete_my_commands()
    
async def on_startup():
    await create_db_pool()
    await init_db()
    await delete_bot_commands()
    scheduler.start()

async def main():
    await create_db_pool()
    await init_db()
    asyncio.create_task(check_access_periodically())

async def on_shutdown():
    scheduler.shutdown()
    await close_db_pool()
    await bot.session.close()

if __name__ == '__main__':
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    try:
        asyncio.run(dp.start_polling(bot))
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
