import logging
import time
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.filters import Command

API_TOKEN = '7964267404:AAGecVUXWNcf7joR-wM5Z9A92m7-HOkh0RM'
ADMIN_ID = 957724800

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

user_access = {}
user_tariffs = {}

# –ö–Ω–æ–ø–∫–∏
main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–£—Ä–æ–≤–µ–Ω—å –°–ê–ú–û–°–¢–û–Ø–¢–ï–õ–¨–ù–´–ô", callback_data="self")],
    [InlineKeyboardButton(text="–£—Ä–æ–≤–µ–Ω—å –ë–ê–ó–û–í–´–ô", callback_data="basic")],
    [InlineKeyboardButton(text="–£—Ä–æ–≤–µ–Ω—å –ü–†–û", callback_data="pro")],
    [InlineKeyboardButton(text="–ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞", callback_data="offer")]
])

materials_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üè∞ –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="get_materials")]
])

def get_self_years_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–ü–µ–Ω—Å–∏—è {year}", callback_data=f"year_{year}")] for year in range(2025, 2032)
    ])

def get_year_buttons(year):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å", url="https://pay.kaspi.kz/pay/vx2s6z0c")],
        [InlineKeyboardButton(text="üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç", callback_data=f"send_screenshot_{year}")]
    ])

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
    else:
        if message.from_user.id in user_access and user_access[message.from_user.id] > time.time():
            await message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø.", reply_markup=materials_keyboard)
        else:
            welcome_text = (
                "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç ‚Äú–°–í–û–Ø –ü–ï–ù–°–ò–Ø‚Äù* ‚Äì —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ –ø—É—Ç–∏ –∫ –¥–æ—Å—Ç–æ–π–Ω–æ–π –ø–µ–Ω—Å–∏–∏!\n"
                "–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å –≤—Å—ë, —á—Ç–æ–±—ã –ø–æ–Ω–∏–º–∞—Ç—å –Ω–∞ –∫–∞–∫—É—é –ø–µ–Ω—Å–∏—é —Ç—ã –º–æ–∂–µ—à—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å, –∫–∞–∫ –µ—ë —É–≤–µ–ª–∏—á–∏—Ç—å –∏ –∫–∞–∫–∏–µ –≤—ã–ø–ª–∞—Ç—ã —Ç–µ–±–µ –ø–æ–ª–æ–∂–µ–Ω—ã –∏–º–µ–Ω–Ω–æ –≤ —Ç–≤–æ–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏. "
                "–ü–æ–ª—É—á–∏—à—å –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å—á–µ—Ç–∞ –ø–µ–Ω—Å–∏–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫ —Ç–≤–æ–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏.\n\n"

                "üëâ *–í–Ω—É—Ç—Ä–∏ —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω–æ:*\n"
                "1Ô∏è‚É£ –†–∞–∑–±–æ—Ä—ã –ø–µ–Ω—Å–∏–π –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ: –∫—Ç–æ, –∫–æ–≥–¥–∞ –∏ —Å–∫–æ–ª—å–∫–æ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å\n"
                "2Ô∏è‚É£ –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º: —Ç–µ–∫—Å—Ç, –≤–∏–¥–µ–æ, —Ñ–æ—Ç–æ ‚Äî –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞\n\n"

                "üí∞ *–£—Ä–æ–≤–Ω–∏:*\n"
                "*–°–ê–ú–û–°–¢–û–Ø–¢–ï–õ–¨–ù–´–ô* ‚Äî 10 000 —Ç–≥\n"
                "*–ë–ê–ó–û–í–´–ô* ‚Äî 50 000 —Ç–≥\n"
                "*–ü–†–û* ‚Äî 250 000 —Ç–≥\n\n"

                "–¢—ã –º–æ–∂–µ—à—å –æ–ø–ª–∞—Ç–∏—Ç—å –ø—Ä—è–º–æ –∑–¥–µ—Å—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø, –∏ –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ *–ü–û–õ–£–ß–ò–¢–¨ –ú–ê–¢–ï–†–ò–ê–õ–´*.\n\n"

                "–¢—ã –Ω–µ –æ–¥–∏–Ω ‚Äî –¥–∞–≤–∞–π —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ!\n"
                "–í—ã–±–∏—Ä–∞–π —É—Ä–æ–≤–µ–Ω—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
            )
            await message.answer(welcome_text, parse_mode="Markdown", reply_markup=main_keyboard)


@dp.message(Command("g"))
async def grant_access(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    args = message.text.split()
    if len(args) < 3:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /g [id] [basic/pro/2025-2031]")
    try:
        user_id = int(args[1])
        tariff = args[2].lower()
        if tariff not in ["basic", "pro"] + [str(y) for y in range(2025, 2032)]:
            return await message.answer("–¢–∞—Ä–∏—Ñ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'basic', 'pro' –∏–ª–∏ '2025'-'2031'.")

        user_tariffs[user_id] = tariff

        if tariff == "basic":
            duration = 30 * 24 * 60 * 60
        elif tariff == "pro":
            duration = 60 * 24 * 60 * 60
        else:
            duration = 30

        user_access[user_id] = time.time() + duration

        await message.answer(f"–î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} ({tariff}) –Ω–∞ {duration // 86400} –¥–Ω–µ–π.")
        await bot.send_message(
            user_id,
            f"‚úÖ –î–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º —É—Ä–æ–≤–Ω—è {tariff.upper()} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ {duration // 86400} –¥–Ω–µ–π!",
            reply_markup=materials_keyboard
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@dp.message(Command("revoke"))
async def revoke_access(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    args = message.text.split()
    if len(args) < 2:
        return await message.answer("–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    try:
        user_id = int(args[1])
        if user_id in user_access:
            # –£–¥–∞–ª—è–µ–º –¥–æ—Å—Ç—É–ø
            del user_access[user_id]
            user_tariffs.pop(user_id, None)

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await bot.send_message(user_id, "‚ùå –í–∞—à –¥–æ—Å—Ç—É–ø –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã.")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await bot.send_message(ADMIN_ID, f"–î–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω.")

            await message.answer(f"–î–æ—Å—Ç—É–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–æ–∑–≤–∞–Ω.")
        else:
            await message.answer("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@dp.message(Command("status"))
async def check_status(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    args = message.text.split()
    if len(args) < 2:
        return await message.answer("–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    try:
        user_id = int(args[1])
        if user_id in user_access and user_access[user_id] > time.time():
            remaining_seconds = user_access[user_id] - time.time()
            days = int(remaining_seconds // (24 * 60 * 60))
            tariff = user_tariffs.get(user_id)

            if tariff:
                await message.answer(
                    f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø ({tariff.upper()}). –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days}."
                )
            else:
                await message.answer(
                    f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø. –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days}, –Ω–æ —Ç–∞—Ä–∏—Ñ –Ω–µ —É–∫–∞–∑–∞–Ω."
                )
        else:
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω –∏—Å—Ç–µ–∫.")

    except Exception as e:
        logging.error(f"\u041e\u0448\u0438\u0431\u043a\u0430: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞.")


@dp.message(Command("help"))
async def help_admin(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    await message.answer("""
/g [id] [basic/pro/2025-2031] - –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø
/revoke [id] - –æ—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø
/status [id] - —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞
/users - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö —Å –¥–æ—Å—Ç—É–ø–æ–º
/help - –∫–æ–º–∞–Ω–¥—ã
    """)


@dp.message(Command("users"))
async def show_users(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    if not user_access:
        return await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º.")
    lines = [
        f"{uid} - –¥–æ {time.ctime(exp)} ({user_tariffs.get(uid, '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')})"
        for uid, exp in user_access.items() if exp > time.time()
    ]
    await message.answer("\n".join(lines))

@dp.callback_query(lambda c: c.data.startswith("year_"))
async def handle_year_selection(call: types.CallbackQuery):
    year = call.data.split("_")[1]
    
    text = """
üîπ –£—Ä–æ–≤–µ–Ω—å –°–ê–ú–û–°–¢–û–Ø–¢–ï–õ–¨–ù–´–ô ‚Äî —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ—é –±—É–¥—É—â—É—é –ø–µ–Ω—Å–∏—é –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ä–∞—Å—á—ë—Ç–æ–≤

üìå –ü–æ–¥—Ö–æ–¥–∏—Ç, –µ—Å–ª–∏:
‚Äì –Ω–µ –¥—Ä—É–∂–∏—Ç–µ —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏, Excel, –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –≥–æ—Å–æ—Ä–≥–∞–Ω–æ–≤
‚Äì –ø—Ä–æ—Å—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–Ω—è—Ç—å, –ø–æ—á–µ–º—É —É –≤–∞—Å –±—É–¥–µ—Ç —Ç–∞–∫–∞—è –ø–µ–Ω—Å–∏—è
‚Äì —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, —á—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–∞–∑–º–µ—Ä –ø–µ–Ω—Å–∏–∏ –∏ –º–æ–∂–Ω–æ –ª–∏ —á—Ç–æ-—Ç–æ —É–ª—É—á—à–∏—Ç—å

üìö –í—ã –ø–æ–ª—É—á–∏—Ç–µ:
‚úîÔ∏è –ì–æ—Ç–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –ø–æ–Ω—è—Ç–Ω–æ–π —Ñ–æ—Ä–º–µ ‚Äî —Ç–∞–±–ª–∏—Ü—ã –∏ –≤–∏–¥–µ–æ
‚úîÔ∏è –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö, –±–µ–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π
‚úîÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: —á—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –≥–¥–µ –≤–∑—è—Ç—å –¥–∞–Ω–Ω—ã–µ, –∫–∞–∫ –Ω–µ —É–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω–æ–µ
‚úîÔ∏è –ö–æ–Ω–µ—á–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å —Ä–∞—Å—á–µ—Ç–æ–º –≤–∞—à–µ–π –ø–µ–Ω—Å–∏–∏

‚è∞ –î–æ—Å—Ç—É–ø: 7 –¥–Ω–µ–π
üí¨ –í–æ–ø—Ä–æ—Å—ã ‚Äî –≤ –æ–±—â–µ–º —á–∞—Ç–µ –º–æ–∂–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é —Ç–∞–±–ª–∏—Ü—ã
üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: 10 000 ‚Ç∏

üëá –ù–∞–∂–º–∏—Ç–µ ¬´‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º.
"""
    
    await call.message.answer(text, reply_markup=get_year_buttons(year))

@dp.callback_query(lambda c: c.data.startswith("send_screenshot_"))
async def handle_year_screenshot(call: types.CallbackQuery):
    year = call.data.split("_")[2]
    user_tariffs[call.from_user.id] = year
    await call.message.answer("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")

@dp.callback_query(
    lambda c: c.data in ["self", "basic", "pro", "offer", "send_screenshot_basic", "send_screenshot_pro", "get_materials"])
async def handle_callback(call: types.CallbackQuery):
    data = call.data
    user_id = call.from_user.id

    if data == "self":
        await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –≤–∞—à–µ–≥–æ –≤—ã—Ö–æ–¥–∞ –Ω–∞ –ø–µ–Ω—Å–∏—é:", reply_markup=get_self_years_keyboard())
        return

    if data == "basic":
        user_tariffs[user_id] = "basic"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å", url="https://pay.kaspi.kz/pay/vx2s6z0c")],
            [InlineKeyboardButton(text="üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç", callback_data="send_screenshot_basic")]
        ])
        await call.message.answer(
        """
üî∏ –£—Ä–æ–≤–µ–Ω—å –ë–ê–ó–û–í–´–ô ‚Äî –º–∏–Ω–∏-–∫—É—Ä—Å –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–Ω–∏–º–∞—Ç—å —Ä–∞—Å—á—ë—Ç –ø–µ–Ω—Å–∏–∏ –∏ –ø–æ–º–æ–≥–∞—Ç—å –¥—Ä—É–≥–∏–º

üìö –í—ã –ø–æ–ª—É—á–∏—Ç–µ:
‚úîÔ∏è –ì–æ—Ç–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å—á—ë—Ç–∞ –ø–µ–Ω—Å–∏–∏ ‚Äî –ø–æ—à–∞–≥–æ–≤–æ, –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª
‚úîÔ∏è –ü—Ä–∏–º–µ—Ä—ã –∏ —à–∞–±–ª–æ–Ω—ã ‚Äî –∫–∞–∫ —Å—á–∏—Ç–∞—Ç—å, –≥–¥–µ –±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
‚úîÔ∏è –í–∏–¥–µ–æ + —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã ‚Äî –≤—Å—ë –ø–æ –¥–µ–ª—É
‚úîÔ∏è –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞—Å—á—ë—Ç—É (–µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ ‚Äî —Ä–∞–∑–±–µ—Ä—ë–º)

üß† –ü–æ–¥—Ö–æ–¥–∏—Ç —Ç–µ–º, –∫—Ç–æ:
‚Äì —Ö–æ—á–µ—Ç —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ —Ç–µ–º–µ –¥–ª—è —Å–µ–±—è –∏ –±–ª–∏–∑–∫–∏—Ö
‚Äì –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –ø–æ–º–æ–≥–∞—Ç—å –¥—Ä—É–≥–∏–º (–∫–∞–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∏–ª–∏ –ø–æ–º–æ—â–Ω–∏–∫)
 ‚Äì –Ω–µ —Ö–æ—á–µ—Ç —Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω—é–∞–Ω—Å–æ–≤

‚è∞ –î–æ—Å—Ç—É–ø: 30 –¥–Ω–µ–π
üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –≤ –æ–±—â–µ–º —á–∞—Ç–µ
üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: 50 000 ‚Ç∏

üëá –ù–∞–∂–º–∏—Ç–µ ¬´‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º.
        """,
        reply_markup=keyboard)

    elif data == "pro":
        user_tariffs[user_id] = "pro"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å", url="https://pay.kaspi.kz/pay/vx2s6z0c")],
            [InlineKeyboardButton(text="üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç", callback_data="send_screenshot_pro")]
        ])
        await call.message.answer("‚ùå –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", reply_markup=keyboard)

    elif data == "offer":
    pdf_path = "–ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞.pdf"  # –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É PDF-—Ñ–∞–π–ª—É

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await call.message.answer_document(open(pdf_path, "rb"))

    elif data == "get_materials":
        if user_id not in user_access or user_access[user_id] < time.time():
            return await call.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.")
        else:
            tariff = user_tariffs.get(user_id)

            # –°–ª–æ–≤–∞—Ä—å —Å—Å—ã–ª–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
            links = {
                "basic": "https://t.me/+HxDdgxzq-9tiNDAy",
                "pro": "https://t.me/pro_channel",
                "2025": "https://t.me/+AaxT4exaNP40NGE6",
                "2026": "https://t.me/+RIvK4Xqzvis1ZjJi",
                "2027": "https://t.me/+ZxN5WrOTCNlhMDIy",
                "2028": "https://t.me/+F5rkfcWZn4AxZTBi",
                "2029": "https://t.me/+lAKvIyr6znw1ZDky",
                "2030": "https://t.me/+VdBjEj-W9oAyZmEy",
                "2031": "https://t.me/+slHyJgK8t1k0MWNi"
            }

            link = links.get(tariff)
            if link:
                await call.message.answer(f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: {link}")
            else:
                await call.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞.")

    elif data.startswith("send_screenshot"):
        await call.message.answer("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")


@dp.message(lambda msg: msg.photo)
async def handle_photo(message: types.Message):
    user = message.from_user
    tariff = user_tariffs.get(user.id, "–Ω–µ –≤—ã–±—Ä–∞–Ω")
    info = (
        f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        f"üÜî ID: {user.id}\n"
        f"üë§ Username: @{user.username if user.username else '–ë–µ–∑ username'}\n"
        f"üí≥ –£—Ä–æ–≤–µ–Ω—å: {tariff.upper() if tariff else '–Ω–µ –≤—ã–±—Ä–∞–Ω'}"
    )
    await message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç! –í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Ä–æ–≤–µ–Ω—å: {tariff.upper()}")
    await bot.send_message(ADMIN_ID, info)
    await bot.send_photo(chat_id=ADMIN_ID, photo=message.photo[-1].file_id, caption="–°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã")


# üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫
GROUP_IDS = [-1002583988789, -1002529607781, -1002611068580, -1002607289832, -1002560662894, -1002645685285, -1002529375771, -1002262602915]  # —Å–ø–∏—Å–æ–∫ ID –≥—Ä—É–ø–ø (–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ @userinfobot)

async def check_access_periodically():
    while True:
        current_time = time.time()
        expired_users = [uid for uid, expire_time in user_access.items() if expire_time <= current_time]

        for user_id in expired_users:
            tariff = user_tariffs.get(user_id, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

            # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø
            for group_id in GROUP_IDS:
                try:
                    await bot.ban_chat_member(group_id, user_id)  # –±–∞–Ω
                    await bot.unban_chat_member(group_id, user_id)  # —Å—Ä–∞–∑—É —Ä–∞–∑–±–∞–Ω, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è
                    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã {group_id}")
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ –≥—Ä—É–ø–ø—ã {group_id}: {e}")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await bot.send_message(user_id, "‚ùå –í–∞—à –¥–æ—Å—Ç—É–ø –∏—Å—Ç—ë–∫. –í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –≥—Ä—É–ø–ø—ã.")
            except:
                pass

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            try:
                await bot.send_message(
                    ADMIN_ID,
                    f"‚õîÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ –≥—Ä—É–ø–ø, –¥–æ—Å—Ç—É–ø –∏—Å—Ç—ë–∫ ({tariff})."
                )
            except:
                pass

            # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            user_access.pop(user_id, None)
            user_tariffs.pop(user_id, None)

        await asyncio.sleep(5)


async def main():
    asyncio.create_task(check_access_periodically())
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
