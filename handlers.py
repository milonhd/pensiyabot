import logging
import os
from typing import List
from aiogram import Bot, Dispatcher, types, filters
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ChatType
from database import Database
import keyboards
from constants import TARIFF_DURATIONS, REQUIRED_AMOUNTS, GROUP_IDS, TARIFF_CHAT_MAP
from datetime import datetime
import time
import asyncio

logger = logging.getLogger(__name__)

class BroadcastStates(StatesGroup):
    waiting_content = State()
    waiting_confirm = State()

class UserHandlers:
    def __init__(self, db: Database, bot: Bot, admin_id: int, group_ids: List[int], receipt_dir: str):
        self.db = db
        self.bot = bot
        self.admin_id = admin_id
        self.group_ids = group_ids
        self.receipt_dir = receipt_dir

    async def cmd_start(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
        await self.db.save_user(message.from_user.id, message.from_user.username, 
                              message.from_user.first_name, message.from_user.last_name)
        name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        main_kb = keyboards.get_main_keyboard(message.from_user.id == self.admin_id)
        
        expire_time, _ = await self.db.get_user_access(message.from_user.id)
        if expire_time and expire_time > time.time():
            await message.answer(f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}! –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø.", 
                               reply_markup=main_kb.as_markup(resize_keyboard=True))
        else:
            welcome_text = (
                f"üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}, –≤ –±–æ—Ç ¬´–°–í–û–Ø –ü–ï–ù–°–ò–Ø¬ª* ‚Äì —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ –ø—É—Ç–∏ –∫ –¥–æ—Å—Ç–æ–π–Ω–æ–π –ø–µ–Ω—Å–∏–∏!\n"
                "–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å –≤—Å—ë, —á—Ç–æ–±—ã –ø–æ–Ω–∏–º–∞—Ç—å –Ω–∞ –∫–∞–∫—É—é –ø–µ–Ω—Å–∏—é —Ç—ã –º–æ–∂–µ—à—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å, –∫–∞–∫ –µ—ë —É–≤–µ–ª–∏—á–∏—Ç—å –∏ –∫–∞–∫–∏–µ –≤—ã–ø–ª–∞—Ç—ã —Ç–µ–±–µ –ø–æ–ª–æ–∂–µ–Ω—ã –∏–º–µ–Ω–Ω–æ –≤ —Ç–≤–æ–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏.\n\n"
                "üëâ *–í–Ω—É—Ç—Ä–∏ —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω–æ:*\n"
                "1Ô∏è‚É£ –†–∞–∑–±–æ—Ä—ã –ø–µ–Ω—Å–∏–π –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ: –∫—Ç–æ, –∫–æ–≥–¥–∞ –∏ —Å–∫–æ–ª—å–∫–æ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å\n"
                "2Ô∏è‚É£ –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º: —Ç–µ–∫—Å—Ç, –≤–∏–¥–µ–æ, —Ñ–æ—Ç–æ ‚Äî –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞\n\n"
                "üí∞ *–£—Ä–æ–≤–Ω–∏:*\n"
                "*–°–ê–ú–û–°–¢–û–Ø–¢–ï–õ–¨–ù–´–ô* ‚Äî 10 000 —Ç–≥\n"
                "*–ë–ê–ó–û–í–´–ô* ‚Äî 50 000 —Ç–≥\n"
                "*–ü–†–û* ‚Äî 250 000 —Ç–≥\n\n"
                "–¢—ã –º–æ–∂–µ—à—å –æ–ø–ª–∞—Ç–∏—Ç—å –ø—Ä—è–º–æ –∑–¥–µ—Å—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –æ–ø–ª–∞—Ç—ã. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø.\n\n"
                "–¢—ã –Ω–µ –æ–¥–∏–Ω ‚Äî –¥–∞–≤–∞–π —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ!\n"
            )
            await message.answer(welcome_text, parse_mode="Markdown", 
                               reply_markup=main_kb.as_markup(resize_keyboard=True))
            await message.answer("üëá –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å:", reply_markup=keyboards.main_keyboard)

    async def handle_offer_button(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞'."""
        pdf_path = "oferta.pdf"
        try:
            document = types.FSInputFile(pdf_path)
            await message.answer_document(document)
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ñ–µ—Ä—Ç—ã: {e}")

    async def handle_support_button(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥–¥–µ—Ä–∂–∫–∞'."""
        support_msg = """
üìû <b>–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>
–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å:
üëâ WhatsApp: <a href="https://wa.me/77754850900">+7 775 485 09 00</a>
‚è∞ –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: –ü–Ω-–ü—Ç, 10:00-22:00
        """
        await message.answer(support_msg, parse_mode="HTML")

    async def handle_document(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF-–¥–æ–∫—É–º–µ–Ω—Ç–∞ (—á–µ–∫–∞)."""
        user = message.from_user
        if message.document.mime_type != 'application/pdf':
            return await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª —á–µ–∫–∞ –∏–∑ Kaspi")

        file_id = message.document.file_id
        if await self.db.check_duplicate_file(file_id):
            return await message.answer("‚ùå –≠—Ç–æ—Ç —á–µ–∫ —É–∂–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω —Ä–∞–Ω–µ–µ")

        os.makedirs(self.receipt_dir, exist_ok=True)
        file_path = os.path.join(self.receipt_dir, f"{user.id}_{message.document.file_name}")
        await self.bot.download(file=await self.bot.get_file(file_id), destination=file_path)

        receipt_data = await self.db.parse_kaspi_receipt(file_path)
        if not receipt_data:
            return await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —á–µ–∫. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª.")

        required_fields = ["amount", "check_number", "fp", "date_time", "iin", "buyer_name"]
        missing_fields = [field for field in required_fields if receipt_data.get(field) is None]
        if missing_fields:
            return await message.answer(
                f"‚ùå –í —á–µ–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {', '.join(missing_fields)}.\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —á–µ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
            )

        try:
            date_time = datetime.strptime(receipt_data["date_time"], "%d.%m.%Y %H:%M")
        except ValueError as e:
            return await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã —á–µ–∫–∞: {e}")

        await message.answer(
            f"–î–∞–Ω–Ω—ã–µ —á–µ–∫–∞:\n"
            f"–ò–ò–ù: {receipt_data['iin']}\n"
            f"–°—É–º–º–∞: {receipt_data['amount']}\n"
            f"–ù–æ–º–µ—Ä —á–µ–∫–∞: {receipt_data['check_number']}\n"
            f"–î–∞—Ç–∞: {receipt_data['date_time']}"
        )

        expire_time, tariff = await self.db.get_user_access(user.id)
        errors = []
        if receipt_data["iin"] != "620613400018":
            errors.append("–ò–ò–ù –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
        if receipt_data["amount"] != REQUIRED_AMOUNTS.get(tariff, 0):
            errors.append(f"–°—É–º–º–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–∞—Ä–∏—Ñ—É {tariff}")

        if errors:
            return await message.answer("‚ùå –û—à–∏–±–∫–∏ –≤ —á–µ–∫–µ:\n" + "\n".join(errors))

        if not await self.db.save_receipt(
            user_id=user.id,
            amount=receipt_data["amount"],
            check_number=receipt_data["check_number"],
            fp=receipt_data["fp"],
            date_time=date_time,
            buyer_name=receipt_data["buyer_name"],
            file_id=file_id
        ):
            return await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–µ–∫–∞")

        duration = TARIFF_DURATIONS.get(tariff, 7) * 86400
        await self.db.set_user_access(user.id, time.time() + duration, tariff)
        await message.answer(
            f"‚úÖ –î–æ—Å—Ç—É–ø —É—Ä–æ–≤–Ω—è {tariff.upper()} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ {duration//86400} –¥–Ω–µ–π!",
            reply_markup=keyboards.materials_keyboard
        )

        info = (
            f"üìÑ –§–∏—Å–∫–∞–ª—å–Ω—ã–π —á–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"üÜî ID: {user.id}\n"
            f"üë§ Username: @{user.username or '–ë–µ–∑ username'}\n"
            f"üí≥ –£—Ä–æ–≤–µ–Ω—å: {tariff.upper() if tariff else '–Ω–µ –≤—ã–±—Ä–∞–Ω'}\n"
            f"üìù –§–∞–π–ª: {message.document.file_name}"
        )
        await self.bot.send_message(self.admin_id, info)
        await self.bot.send_document(self.admin_id, file_id)

class AdminHandlers:
    def __init__(self, db: Database, bot: Bot, admin_id: int, group_ids: List[int]):
        self.db = db
        self.bot = bot
        self.admin_id = admin_id
        self.group_ids = group_ids

    async def cmd_grant(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /g –¥–ª—è –≤—ã–¥–∞—á–∏ –¥–æ—Å—Ç—É–ø–∞."""
        if message.from_user.id != self.admin_id:
            return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        args = message.text.split()
        if len(args) < 3:
            return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /g [id] [basic/pro/2025-2031]")
        try:
            user_id = int(args[1])
            tariff = args[2].lower()
            if tariff not in ["basic", "pro"] + [str(y) for y in range(2025, 2032)]:
                return await message.answer("–¢–∞—Ä–∏—Ñ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'basic', 'pro' –∏–ª–∏ '2025'-'2031'.")

            duration = TARIFF_DURATIONS.get(tariff, 7) * 86400
            expire_time = time.time() + duration
            await self.db.set_user_access(user_id, expire_time, tariff)

            await message.answer(f"–î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} ({tariff}) –Ω–∞ {duration // 86400} –¥–Ω–µ–π.")
            await self.bot.send_message(
                user_id,
                f"‚úÖ –î–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º —É—Ä–æ–≤–Ω—è {tariff.upper()} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ {duration // 86400} –¥–Ω–µ–π!",
                reply_markup=keyboards.materials_keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –¥–æ—Å—Ç—É–ø–∞: {e}", exc_info=True)
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

    async def cmd_revoke(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /revoke –¥–ª—è –æ—Ç–∑—ã–≤–∞ –¥–æ—Å—Ç—É–ø–∞."""
        if message.from_user.id != self.admin_id:
            return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        args = message.text.split()
        if len(args) < 2:
            return await message.answer("–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

        try:
            user_id = int(args[1])
            expire_time, _ = await self.db.get_user_access(user_id)
            if expire_time:
                await self.db.revoke_user_access(user_id)
                await self.bot.send_message(user_id, "‚ùå –í–∞—à –¥–æ—Å—Ç—É–ø –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω.")
                await self.bot.send_message(self.admin_id, f"–î–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω.")

                for group_id in self.group_ids:
                    try:
                        await self.bot.ban_chat_member(group_id, user_id)
                        await self.bot.unban_chat_member(group_id, user_id)
                        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã {group_id}")
                    except Exception as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥—Ä—É–ø–ø—ã {group_id}: {e}")
            else:
                await message.answer("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ –¥–æ—Å—Ç—É–ø–∞: {e}", exc_info=True)
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

    async def cmd_status(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ—Å—Ç—É–ø–∞."""
        if message.from_user.id != self.admin_id:
            return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        args = message.text.split()
        if len(args) < 2:
            return await message.answer("–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

        try:
            user_id = int(args[1])
            expire_time, tariff = await self.db.get_user_access(user_id)
            if expire_time and expire_time > time.time():
                remaining_seconds = expire_time - time.time()
                days = int(remaining_seconds // (24 * 60 * 60))
                await message.answer(
                    f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø ({tariff.upper()}). –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days}."
                )
            else:
                await message.answer("‚ùå –î–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω –∏—Å—Ç–µ–∫.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}", exc_info=True)
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞.")

    async def cmd_users(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /users –¥–ª—è –ø–æ–∫–∞–∑–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        if message.from_user.id != self.admin_id:
            return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        active_users = await self.db.get_all_active_users()
        if not active_users:
            return await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º.")
        
        lines = [
            f"{uid} - –¥–æ {time.ctime(exp)} ({tariff})"
            for uid, exp, tariff in active_users
        ]
        await message.answer("\n".join(lines))

    async def cmd_help(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help –¥–ª—è –∞–¥–º–∏–Ω–∞."""
        if message.from_user.id != self.admin_id:
            return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        await message.answer("""
/g [id] [basic/pro/2025-2031] - –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø
/revoke [id] - –æ—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø
/status [id] - —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞
/users - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö —Å –¥–æ—Å—Ç—É–ø–æ–º
/help - –∫–æ–º–∞–Ω–¥—ã
        """)

    async def handle_broadcast_start(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏."""
        if message.from_user.id != self.admin_id:
            return await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", reply_markup=types.ReplyKeyboardRemove())
        
        cancel_kb = keyboards.ReplyKeyboardBuilder()
        cancel_kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
        cancel_kb.adjust(2)
        
        await message.answer(
            "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ):",
            reply_markup=cancel_kb.as_markup(resize_keyboard=True)
        )
        await state.set_state(BroadcastStates.waiting_content)

    async def handle_broadcast_content(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏."""
        content = {
            'text': message.html_text if message.text else message.caption if message.caption else "",
            'photo': message.photo[-1].file_id if message.photo else None,
            'video': message.video.file_id if message.video else None,
            'document': message.document.file_id if message.document else None
        }
        
        if not any(content.values()):
            return await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        await state.update_data(content=content)
        
        confirm_kb = keyboards.ReplyKeyboardBuilder()
        confirm_kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
        confirm_kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
        confirm_kb.adjust(2)

        if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
            await state.clear()
            await self.show_main_menu(message, "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
        
        preview_text = "üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n" + content['text']
        try:
            if content['photo']:
                await message.answer_photo(content['photo'], caption=preview_text)
            elif content['video']:
                await message.answer_video(content['video'], caption=preview_text)
            elif content['document']:
                await message.answer_document(content['document'], caption=preview_text)
            else:
                await message.answer(preview_text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}", exc_info=True)
            return await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=confirm_kb.as_markup(resize_keyboard=True)
        )
        await state.set_state(BroadcastStates.waiting_confirm)

    async def handle_broadcast_confirm(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
            await state.clear()
            await self.show_main_menu(message, "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
        
        if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É":
            await self.send_broadcast(message, state)
            return
        
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è")

    async def show_main_menu(self, message: types.Message, text: str = None):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
        main_kb = keyboards.get_main_keyboard(message.from_user.id == self.admin_id)
        
        if text:
            await message.answer(text, reply_markup=main_kb.as_markup(resize_keyboard=True))
        else:
            await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb.as_markup(resize_keyboard=True))

    async def send_broadcast(self, message: types.Message, state: FSMContext):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
        data = await state.get_data()
        if 'content' not in data:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", reply_markup=types.ReplyKeyboardRemove())
            await state.clear()
            return
        
        users = await self.db.get_all_users()
        if not users:
            await message.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=types.ReplyKeyboardRemove())
            await state.clear()
            return
        
        progress_msg = await message.answer("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É...")
        
        success = 0
        errors = 0
        total_users = len(users)
        
        for index, user_id in enumerate(users, 1):
            try:
                content = data['content']
                if content.get('photo'):
                    await self.bot.send_photo(
                        chat_id=user_id,
                        photo=content['photo'],
                        caption=content.get('text', ''),
                        parse_mode='HTML'
                    )
                elif content.get('video'):
                    await self.bot.send_video(
                        chat_id=user_id,
                        video=content['video'],
                        caption=content.get('text', ''),
                        parse_mode='HTML'
                    )
                elif content.get('document'):
                    await self.bot.send_document(
                        chat_id=user_id,
                        document=content['document'],
                        caption=content.get('text', ''),
                        parse_mode='HTML'
                    )
                else:
                    await self.bot.send_message(
                        chat_id=user_id,
                        text=content.get('text', ''),
                        parse_mode='HTML'
                    )
                
                success += 1
                
                if index % 10 == 0 or index == total_users:
                    progress = int(index / total_users * 100)
                    await progress_msg.edit_text(
                        f"üîÑ –†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...\n"
                        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%\n"
                        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n"
                        f"‚ùå –û—à–∏–±–æ–∫: {errors}"
                    )
                    
            except Exception as e:
                errors += 1
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                await asyncio.sleep(1)
        
        try:
            await progress_msg.delete()
        except:
            pass
        
        report_message = (
            f"üìä –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {errors}\n"
            f"üìà –£—Å–ø–µ—à–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–æ–∫: {int(success/total_users*100)}%"
        )

        await message.answer(report_message, reply_markup=types.ReplyKeyboardRemove())
        await state.clear()

class CallbackHandlers:
    def __init__(self, db: Database, bot: Bot, admin_id: int, group_ids: List[int]):
        self.db = db
        self.bot = bot
        self.admin_id = admin_id
        self.group_ids = group_ids

    async def handle_callback(self, call: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤."""
        if call.message.chat.type != ChatType.PRIVATE:
            return

        data = call.data
        user_id = call.from_user.id

        if data == "self":
            await call.message.answer("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –≤–∞—à–µ–≥–æ –≤—ã—Ö–æ–¥–∞ –Ω–∞ –ø–µ–Ω—Å–∏—é:", reply_markup=keyboards.get_self_years_keyboard())
            return

        if data == "basic":
            await self.db.set_user_access(user_id, None, "basic")
            keyboard = keyboards.InlineKeyboardMarkup(inline_keyboard=[
                [keyboards.InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å", url="https://pay.kaspi.kz/pay/vx2s6z0c")],
                [keyboards.InlineKeyboardButton(text="üìÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫", callback_data="send_screenshot_basic")]
            ])
            await call.message.answer(
                """
üî∏ –£—Ä–æ–≤–µ–Ω—å –ë–ê–ó–û–í–´–ô ‚Äî –º–∏–Ω–∏-–∫—É—Ä—Å –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–Ω–∏–º–∞—Ç—å —Ä–∞—Å—á—ë—Ç –ø–µ–Ω—Å–∏–∏ –∏ –ø–æ–º–æ–≥–∞—Ç—å –¥—Ä—É–≥–∏–º

üìö –í—ã –ø–æ–ª—É—á–∏—Ç–µ:
‚úîÔ∏è –ì–æ—Ç–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å—á—ë—Ç–∞ –ø–µ–Ω—Å–∏–∏ ‚Äî –ø–æ—à–∞–≥–æ–≤–æ, –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª
‚úîÔ∏è –ü—Ä–∏–º–µ—Ä—ã –∏ —à–∞–±–ª–æ–Ω—ã ‚Äî –∫–∞–∫ —Å—á–∏—Ç–∞—Ç—å, –≥–¥–µ –±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
‚úîÔ∏è –í–∏–¥–µ–æ + —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã ‚Äî –≤—Å—ë –ø–æ –¥–µ–ª—É
‚úîÔ∏è –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞—Å—á—ë—Ç—É

üß† –ü–æ–¥—Ö–æ–¥–∏—Ç —Ç–µ–º, –∫—Ç–æ:
‚Äì —Ö–æ—á–µ—Ç —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ —Ç–µ–º–µ –¥–ª—è —Å–µ–±—è –∏ –±–ª–∏–∑–∫–∏—Ö
‚Äì –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –ø–æ–º–æ–≥–∞—Ç—å –¥—Ä—É–≥–∏–º
‚Äì –Ω–µ —Ö–æ—á–µ—Ç —Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ

‚è∞ –î–æ—Å—Ç—É–ø: 30 –¥–Ω–µ–π
üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –≤ –æ–±—â–µ–º —á–∞—Ç–µ
üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: 50 000 ‚Ç∏

üëá –ù–∞–∂–º–∏—Ç–µ ¬´‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º.
                """,
                reply_markup=keyboard
            )

        elif data == "pro":
            await self.db.set_user_access(user_id, None, "pro")
            keyboard = keyboards.InlineKeyboardMarkup(inline_keyboard=[
                [keyboards.InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å", url="https://pay.kaspi.kz/pay/vx2s6z0c")],
                [keyboards.InlineKeyboardButton(text="üìÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫", callback_data="send_screenshot_pro")]
            ])
            await call.message.answer("‚ùå –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", reply_markup=keyboard)

        elif data.startswith("year_"):
            year = data.split("_")[1]
            text = """
üîπ –£—Ä–æ–≤–µ–Ω—å –°–ê–ú–û–°–¢–û–Ø–¢–ï–õ–¨–ù–´–ô ‚Äî —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ—é –±—É–¥—É—â—É—é –ø–µ–Ω—Å–∏—é –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ä–∞—Å—á—ë—Ç–æ–≤

üìå –ü–æ–¥—Ö–æ–¥–∏—Ç, –µ—Å–ª–∏:
‚Äì –Ω–µ –¥—Ä—É–∂–∏—Ç–µ —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏, Excel, –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å—á–µ—Ç–∞
‚Äì –ø—Ä–æ—Å—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–Ω—è—Ç—å, –ø–æ—á–µ–º—É —É –≤–∞—Å –±—É–¥–µ—Ç —Ç–∞–∫–∞—è –ø–µ–Ω—Å–∏—è
‚Äì —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, —á—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–∞–∑–º–µ—Ä –ø–µ–Ω—Å–∏–∏

üìö –í—ã –ø–æ–ª—É—á–∏—Ç–µ:
‚úîÔ∏è –ì–æ—Ç–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –ø–æ–Ω—è—Ç–Ω–æ–π —Ñ–æ—Ä–º–µ ‚Äî —Ç–∞–±–ª–∏—Ü—ã –∏ –≤–∏–¥–µ–æ
‚úîÔ∏è –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö
‚úîÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: —á—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –≥–¥–µ –≤–∑—è—Ç—å –¥–∞–Ω–Ω—ã–µ
‚úîÔ∏è –ö–æ–Ω–µ—á–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å —Ä–∞—Å—á–µ—Ç–æ–º –≤–∞—à–µ–π –ø–µ–Ω—Å–∏–∏

‚è∞ –î–æ—Å—Ç—É–ø: 7 –¥–Ω–µ–π
üí¨ –í–æ–ø—Ä–æ—Å—ã ‚Äî –≤ –æ–±—â–µ–º —á–∞—Ç–µ
üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: 10 000 ‚Ç∏

üëá –ù–∞–∂–º–∏—Ç–µ ¬´‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º.
            """
            await call.message.answer(text, reply_markup=keyboards.get_year_buttons(year))

        elif data.startswith("send_screenshot_"):
            expire_time, current_tariff = await self.db.get_user_access(user_id)
            if expire_time and expire_time > time.time():
                await call.answer("‚ùó –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø!", show_alert=True)
                return
            year = data.split("_")[2]
            await self.db.set_user_access(user_id, None, year)
            await call.message.answer(
                f"üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª —Ñ–∏—Å–∫–∞–ª—å–Ω–æ–≥–æ —á–µ–∫–∞ –∏–∑ Kaspi!\n\n"
                "üìå –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —á–µ–∫:\n"
                "1. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤ Kaspi –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–∫–∞–∑–∞—Ç—å —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ¬ª\n"
                "2. –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è¬ª\n"
                "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –≤ —ç—Ç–æ—Ç —á–∞—Ç\n\n"
            )

        elif data == "get_materials":
            await call.answer()
            await call.message.edit_reply_markup(
                reply_markup=keyboards.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [keyboards.InlineKeyboardButton(
                            text="‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ–ª—É—á–µ–Ω—ã", 
                            callback_data="used_link"
                        )]
                    ]
                )
            )
            expire_time, tariff = await self.db.get_user_access(user_id)
            if not expire_time or expire_time < time.time():
                return await call.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.")

            chat_id = TARIFF_CHAT_MAP.get(tariff)
            if not chat_id:
                return await call.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–Ω–∞–ª –ø–æ –≤–∞—à–µ–º—É —Ç–∞—Ä–∏—Ñ—É.")

            try:
                invite = await self.bot.create_chat_invite_link(
                    chat_id=chat_id,
                    member_limit=1,
                    expire_date=int(time.time()) + 15,
                    creates_join_request=False
                )
                msg = await call.message.answer(
                    f"üîê –í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ (–∏—Å—á–µ–∑–Ω–µ—Ç —Å–ø—É—Å—Ç—è 15 —Å–µ–∫—É–Ω–¥):\n{invite.invite_link}"
                )
                await asyncio.sleep(15)
                try:
                    await msg.delete()
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
                await call.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏.")

        elif data == "used_link":
            await call.answer("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç—É —Å—Å—ã–ª–∫—É", show_alert=True)

def register_handlers(dp: Dispatcher, db: Database, bot: Bot, admin_id: int, group_ids: List[int]):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
    user_handlers = UserHandlers(db, bot, admin_id, group_ids, os.getenv("RECEIPT_DIR", "/app/receipts"))
    admin_handlers = AdminHandlers(db, bot, admin_id, group_ids)
    callback_handlers = CallbackHandlers(db, bot, admin_id, group_ids)

    dp.message.register(user_handlers.cmd_start, Command("start"), filters.ChatType.PRIVATE)
    dp.message.register(user_handlers.handle_offer_button, filters.Text(text="üìÑ –ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞"), filters.ChatType.PRIVATE)
    dp.message.register(user_handlers.handle_support_button, filters.Text(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞"), filters.ChatType.PRIVATE)
    dp.message.register(user_handlers.handle_document, lambda m: m.document and m.chat.type == ChatType.PRIVATE)
    dp.message.register(admin_handlers.handle_broadcast_start, filters.Text(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞"), filters.ChatType.PRIVATE)
    dp.message.register(admin_handlers.handle_broadcast_content, BroadcastStates.waiting_content)
    dp.message.register(admin_handlers.handle_broadcast_confirm, BroadcastStates.waiting_confirm)
    
    dp.message.register(admin_handlers.cmd_grant, Command("g"), filters.ChatType.PRIVATE)
    dp.message.register(admin_handlers.cmd_revoke, Command("revoke"), filters.ChatType.PRIVATE)
    dp.message.register(admin_handlers.cmd_status, Command("status"), filters.ChatType.PRIVATE)
    dp.message.register(admin_handlers.cmd_users, Command("users"), filters.ChatType.PRIVATE)
    dp.message.register(admin_handlers.cmd_help, Command("help"), filters.ChatType.PRIVATE)
    
    dp.callback_query.register(callback_handlers.handle_callback, lambda c: c.data in ["self", "basic", "pro", "get_materials", "used_link"] or c.data.startswith("year_") or c.data.startswith("send_screenshot_"))
