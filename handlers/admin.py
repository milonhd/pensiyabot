import logging
import time
from aiogram import types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ChatType
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from config import ADMIN_ID, GROUP_IDS
from database.operations import (
    get_user_access, set_user_access, revoke_user_access,
    get_all_active_users, delete_user_access, get_all_users
)


logger = logging.getLogger(__name__)


class BroadcastStates(StatesGroup):
    waiting_content = State()
    waiting_confirm = State()
    waiting_time = State()


async def cmd_help(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    await message.answer("""
/g [id] [basic/pro/2025-2031] - –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø
/revoke [id] - –æ—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø
/status [id] - —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞
/users - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö —Å –¥–æ—Å—Ç—É–ø–æ–º
/help - –∫–æ–º–∞–Ω–¥—ã
    """)


async def grant_access(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    args = message.text.split()
    if len(args) < 3:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /g [id] [basic/pro/2025-2031]")
    try:
        user_id = int(args[1])
        tariff = args[2].lower()
        if tariff not in ["basic", "pro"] + [str(y) for y in range(2025, 2032)]:
            return await message.answer("–¢–∞—Ä–∏—Ñ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'basic', 'pro' –∏–ª–∏ '2025'-'2031'.")

        if tariff == "basic":
            duration = 30 * 24 * 60 * 60
        elif tariff == "pro":
            duration = 60 * 24 * 60 * 60
        else:
            duration = 7 * 24 * 60 * 60

        expire_time = time.time() + duration
        await set_user_access(user_id, expire_time, tariff)

        await message.answer(f"–î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} ({tariff}) –Ω–∞ {duration // 86400} –¥–Ω–µ–π.")
        materials_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üè∞ –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="get_materials")]
        ])
        await message.bot.send_message(
            user_id,
            f"‚úÖ –î–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º —É—Ä–æ–≤–Ω—è {tariff.upper()} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ {duration // 86400} –¥–Ω–µ–π!",
            reply_markup=materials_keyboard
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


async def revoke_access(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    args = message.text.split()
    if len(args) < 2:
        return await message.answer("–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    try:
        user_id = int(args[1])
        expire_time, _ = await get_user_access(user_id)
        
        if expire_time:
            await revoke_user_access(user_id)
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await message.bot.send_message(user_id, "‚ùå –í–∞—à –¥–æ—Å—Ç—É–ø –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã.")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await message.bot.send_message(ADMIN_ID, f"–î–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω.")

            for group_id in GROUP_IDS:
                try:
                    await message.bot.ban_chat_member(group_id, user_id)
                    await message.bot.unban_chat_member(group_id, user_id)  # —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ —Å–Ω–æ–≤–∞ –≤—Å—Ç—É–ø–∏—Ç—å –ø–æ–∑–∂–µ
                    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã {group_id}")
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥—Ä—É–ø–ø—ã {group_id}: {e}")
        
        else:
            await message.answer("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


async def check_status(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    args = message.text.split()
    if len(args) < 2:
        return await message.answer("–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    try:
        user_id = int(args[1])
        expire_time, tariff = await get_user_access(user_id)
        
        if expire_time and expire_time > time.time():
            remaining_seconds = expire_time - time.time()
            days = int(remaining_seconds // (24 * 60 * 60))

            if tariff:
                await message.answer(
                    f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø ({tariff.upper()}). –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days}."
                )
            else:
                await message.answer(
                    f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø. –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days}, –Ω–æ —Ç–∞—Ä–∏—Ñ –Ω–µ —É–∫–∞–∑–∞–Ω."
                )
        else:
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω –∏—Å—Ç–µ–∫.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞.")


async def show_users(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    
    active_users = await get_all_active_users()
    if not active_users:
        return await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º.")
    
    lines = [
        f"{uid} - –¥–æ {time.ctime(exp)} ({tariff})"
        for uid, exp, tariff in active_users
    ]
    await message.answer("\n".join(lines))


async def start_broadcast(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", reply_markup=types.ReplyKeyboardRemove())
    
    cancel_kb = ReplyKeyboardBuilder()
    cancel_kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
    cancel_kb.adjust(2)
    
    await message.answer(
        "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ):",
        reply_markup=cancel_kb.as_markup(resize_keyboard=True)
    )
    await state.set_state(BroadcastStates.waiting_content)


async def process_content(message: types.Message, state: FSMContext):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    content = {
        'text': message.html_text if message.text else message.caption if message.caption else "",
        'photo': message.photo[-1].file_id if message.photo else None,
        'video': message.video.file_id if message.video else None,
        'document': message.document.file_id if message.document else None
    }
    
    if not any(content.values()):
        return await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    
    await state.update_data(content=content)
    
    confirm_kb = ReplyKeyboardBuilder()
    confirm_kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
    confirm_kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
    confirm_kb.adjust(2)

    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
            await state.clear()
            await show_main_menu(message, "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
    
    preview_text = "üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n" + content['text']
    try:
        if content['photo']:
            await message.answer_photo(content['photo'], caption=preview_text)
        elif content['video']:
            await message.answer_video(content['video'], caption=preview_text)
        elif content['document']:
            await message.answer_document(content['document'], caption=preview_text)
        else:
            await message.answer(preview_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")
        return await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=confirm_kb.as_markup(resize_keyboard=True)
    )
    await state.set_state(BroadcastStates.waiting_confirm)


async def confirm_broadcast(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await show_main_menu(message, "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
    
    if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É":
        await send_broadcast(message, state)
        return
    
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è")


async def send_broadcast(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    if 'content' not in data:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = await get_all_users()
    if not users:
        await message.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    progress_msg = await message.answer("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    success = 0
    errors = 0
    total_users = len(users)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    for index, user_id in enumerate(users, 1):
        try:
            content = data['content']
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if content.get('photo'):
                await message.bot.send_photo(
                    chat_id=user_id,
                    photo=content['photo'],
                    caption=content.get('text', ''),
                    parse_mode='HTML'
                )
            elif content.get('video'):
                await message.bot.send_video(
                    chat_id=user_id,
                    video=content['video'],
                    caption=content.get('text', ''),
                    parse_mode='HTML'
                )
            elif content.get('document'):
                await message.bot.send_document(
                    chat_id=user_id,
                    document=content['document'],
                    caption=content.get('text', ''),
                    parse_mode='HTML'
                )
            else:
                await message.bot.send_message(
                    chat_id=user_id,
                    text=content.get('text', ''),
                    parse_mode='HTML'
                )
            
            success += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if index % 10 == 0 or index == total_users:
                progress = int(index / total_users * 100)
                await progress_msg.edit_text(
                    f"üîÑ –†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...\n"
                    f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%\n"
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n"
                    f"‚ùå –û—à–∏–±–æ–∫: {errors}"
                )
                
        except Exception as e:
            errors += 1
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
            
            # –î–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç—å flood control
            await asyncio.sleep(1)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    try:
        await progress_msg.delete()
    except:
        pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    report_message = (
        f"üìä –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {errors}\n"
        f"üìà –£—Å–ø–µ—à–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–æ–∫: {int(success/total_users*100)}%"
    )

    await message.answer(report_message, reply_markup=types.ReplyKeyboardRemove())
    await state.clear()


async def show_main_menu(message: types.Message, text: str = None):
    main_kb = ReplyKeyboardBuilder()
    main_kb.button(text="üìÑ –ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞")
    main_kb.button(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    
    if message.from_user.id == ADMIN_ID:
        main_kb.button(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
    
    main_kb.adjust(2)
    
    if text:
        await message.answer(text, reply_markup=main_kb.as_markup(resize_keyboard=True))
    else:
        await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb.as_markup(resize_keyboard=True))


async def approve_user(call: types.CallbackQuery):
    if call.from_user.id != ADMIN_ID:
        return await call.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")

    user_id = int(call.data.split("_")[1])
    _, tariff = await get_user_access(user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —á–µ–∫–∞
    pool = await create_pool()
    async with pool.acquire() as conn:
        async with conn.cursor() as cur:
            await cur.execute("SELECT 1 FROM fiscal_checks WHERE user_id = %s", (user_id,))
            if not await cur.fetchone():
                return await call.answer("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ —á–µ–∫–∞")

    if not tariff:
        return await call.answer("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –≤—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ!")

    # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–∞
    if tariff == "basic":
        duration = 30 * 86400
    elif tariff == "pro":
        duration = 60 * 86400
    elif tariff in [str(y) for y in range(2025, 2032)]:
        duration = 7 * 86400
    else:
        return await call.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    expire_time = time.time() + duration
    await set_user_access(user_id, expire_time, tariff)

    # –õ–æ–≥ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª)
    with open("access_log.txt", "a", encoding="utf-8") as f:
        f.write(f"{user_id} | {tariff} | {time.ctime()} | {duration // 86400} –¥–Ω–µ–π\n")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    materials_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üè∞ –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="get_materials")]
    ])
    await call.bot.send_message(
        user_id, 
        f"‚úÖ –î–æ—Å—Ç—É–ø —É—Ä–æ–≤–Ω—è {tariff.upper()} –≤—ã–¥–∞–Ω –Ω–∞ {duration // 86400} –¥–Ω–µ–π!", 
        reply_markup=materials_keyboard
    )

    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É
    await call.message.edit_reply_markup(reply_markup=None)
    await call.answer("–î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω.")


def register_admin_handlers(dp):
    dp.message.register(cmd_help, Command("help"), F.chat.type == ChatType.PRIVATE)
    dp.message.register(grant_access, Command("g"), F.chat.type == ChatType.PRIVATE)
    dp.message.register(revoke_access, Command("revoke"), F.chat.type == ChatType.PRIVATE)
    dp.message.register(check_status, Command("status"), F.chat.type == ChatType.PRIVATE)
    dp.message.register(show_users, Command("users"), F.chat.type == ChatType.PRIVATE)
    dp.message.register(start_broadcast, F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞", F.chat.type == ChatType.PRIVATE)
    dp.message.register(process_content, BroadcastStates.waiting_content)
    dp.message.register(confirm_broadcast, BroadcastStates.waiting_confirm)
    dp.callback_query.register(approve_user, lambda c: c.data.startswith("approve_"))
