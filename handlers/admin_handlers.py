# handlers/admin_handlers.py
import logging
import time
import asyncio
from aiogram import F, Bot, types, Dispatcher
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.enums import ChatType
from keyboards import get_main_menu_keyboard, get_cancel_keyboard, get_confirm_broadcast_keyboard
from database import get_user_access, set_user_access, revoke_user_access, get_all_active_users, get_all_users
from config import ADMIN_ID

logger = logging.getLogger(__name__)

class BroadcastStates(StatesGroup):
    waiting_content = State()
    waiting_confirm = State()

# –£–¥–∞–ª–µ–Ω –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä @Command("g")
@F.chat.type == ChatType.PRIVATE
async def grant_access(message: types.Message, bot: Bot):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    args = message.text.split()
    if len(args) < 3:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /g [id] [basic/pro/2025-2031]")
    try:
        user_id = int(args[1])
        tariff = args[2].lower()
        if tariff not in ["basic", "pro"] + [str(y) for y in range(2025, 2032)]:
            return await message.answer("–¢–∞—Ä–∏—Ñ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'basic', 'pro' –∏–ª–∏ '2025'-'2031'.")

        if tariff == "basic":
            duration = 30 * 24 * 60 * 60
        elif tariff == "pro":
            duration = 60 * 24 * 60 * 60
        else: # self
            duration = 7 * 24 * 60 * 60

        expire_time = time.time() + duration
        await set_user_access(user_id, expire_time, tariff)

        await message.answer(f"–î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} ({tariff}) –Ω–∞ {duration // 86400} –¥–Ω–µ–π.")
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ `materials_keyboard` –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∏–∑ `keyboards`
        from keyboards import materials_keyboard
        await bot.send_message(
            user_id,
            f"‚úÖ –î–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º —É—Ä–æ–≤–Ω—è {tariff.upper()} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ {duration // 86400} –¥–Ω–µ–π!",
            reply_markup=materials_keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

# –£–¥–∞–ª–µ–Ω –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä @Command("revoke")
@F.chat.type == ChatType.PRIVATE
async def revoke_access(message: types.Message, bot: Bot):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    args = message.text.split()
    if len(args) < 2:
        return await message.answer("–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    try:
        user_id = int(args[1])
        expire_time, _ = await get_user_access(user_id)

        if expire_time:
            await revoke_user_access(user_id)
            await bot.send_message(user_id, "‚ùå –í–∞—à –¥–æ—Å—Ç—É–ø –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã.")
            await bot.send_message(ADMIN_ID, f"–î–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω.")

            from config import GROUP_IDS # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
            for group_id in GROUP_IDS:
                try:
                    await bot.ban_chat_member(group_id, user_id)
                    await bot.unban_chat_member(group_id, user_id) # —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ —Å–Ω–æ–≤–∞ –≤—Å—Ç—É–ø–∏—Ç—å –ø–æ–∑–∂–µ
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã {group_id}")
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥—Ä—É–ø–ø—ã {group_id}: {e}")
        else:
            await message.answer("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

# –£–¥–∞–ª–µ–Ω –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä @Command("status")
@F.chat.type == ChatType.PRIVATE
async def check_status(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    args = message.text.split()
    if len(args) < 2:
        return await message.answer("–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    try:
        user_id = int(args[1])
        expire_time, tariff = await get_user_access(user_id)

        if expire_time and expire_time > time.time():
            remaining_seconds = expire_time - time.time()
            days = int(remaining_seconds // (24 * 60 * 60))

            if tariff:
                await message.answer(
                    f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø ({tariff.upper()}). –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days}."
                )
            else:
                await message.answer(
                    f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø. –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days}, –Ω–æ —Ç–∞—Ä–∏—Ñ –Ω–µ —É–∫–∞–∑–∞–Ω."
                )
        else:
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω –∏—Å—Ç–µ–∫.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞.")

# –£–¥–∞–ª–µ–Ω –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä @Command("help")
@F.chat.type == ChatType.PRIVATE
async def help_admin(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    await message.answer("""
/g [id] [basic/pro/2025-2031] - –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø
/revoke [id] - –æ—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø
/status [id] - —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞
/users - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö —Å –¥–æ—Å—Ç—É–ø–æ–º
/help - –∫–æ–º–∞–Ω–¥—ã
    """)

# –£–¥–∞–ª–µ–Ω –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä @Command("users")
@F.chat.type == ChatType.PRIVATE
async def show_users(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    active_users = await get_all_active_users()
    if not active_users:
        return await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º.")

    lines = [
        f"{uid} - –¥–æ {time.ctime(exp)} ({tariff})"
        for uid, exp, tariff in active_users
    ]
    await message.answer("\n".join(lines))

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞" –æ—Å—Ç–∞–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Command —Ñ–∏–ª—å—Ç—Ä–æ–º
@F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞"
@F.chat.type == ChatType.PRIVATE
async def start_broadcast(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", reply_markup=types.ReplyKeyboardRemove())

    await message.answer(
        "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(BroadcastStates.waiting_content)

@BroadcastStates.waiting_content
async def process_content(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        from handlers.user_handlers import show_main_menu # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å
        await show_main_menu(message, "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return

    content = {
        'text': message.html_text if message.text else message.caption if message.caption else "",
        'photo': message.photo[-1].file_id if message.photo else None,
        'video': message.video.file_id if message.video else None,
        'document': message.document.file_id if message.document else None
    }

    if not any(content.values()):
        return await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

    await state.update_data(content=content)

    preview_text = "üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n" + content['text']
    try:
        if content['photo']:
            await message.answer_photo(content['photo'], caption=preview_text)
        elif content['video']:
            await message.video(content['video'], caption=preview_text)
        elif content['document']:
            await message.answer_document(content['document'], caption=preview_text)
        else:
            await message.answer(preview_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")
        return await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞")

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_confirm_broadcast_keyboard()
    )
    await state.set_state(BroadcastStates.waiting_confirm)

@BroadcastStates.waiting_confirm
async def confirm_broadcast(message: types.Message, state: FSMContext, bot: Bot):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        from handlers.user_handlers import show_main_menu # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å
        await show_main_menu(message, "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return

    if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É":
        await send_broadcast(message, state, bot)
        return

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è")

async def send_broadcast(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    if 'content' not in data:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return

    users = await get_all_users()
    if not users:
        await message.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return

    progress_msg = await message.answer("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É...")

    success = 0
    errors = 0
    total_users = len(users)

    for index, user_id in enumerate(users, 1):
        try:
            content = data['content']

            if content.get('photo'):
                await bot.send_photo(
                    chat_id=user_id,
                    photo=content['photo'],
                    caption=content.get('text', ''),
                    parse_mode='HTML'
                )
            elif content.get('video'):
                await bot.send_video(
                    chat_id=user_id,
                    video=content['video'],
                    caption=content.get('text', ''),
                    parse_mode='HTML'
                )
            elif content.get('document'):
                await bot.send_document(
                    chat_id=user_id,
                    document=content['document'],
                    caption=content.get('text', ''),
                    parse_mode='HTML'
                )
            else:
                await bot.send_message(
                    chat_id=user_id,
                    text=content.get('text', ''),
                    parse_mode='HTML'
                )

            success += 1

            if index % 10 == 0 or index == total_users:
                progress = int(index / total_users * 100)
                await progress_msg.edit_text(
                    f"üîÑ –†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...\n"
                    f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%\n"
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n"
                    f"‚ùå –û—à–∏–±–æ–∫: {errors}"
                )

        except Exception as e:
            errors += 1
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
            await asyncio.sleep(1)

    try:
        await progress_msg.delete()
    except:
        pass

    report_message = (
        f"üìä –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {errors}\n"
        f"üìà –£—Å–ø–µ—à–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–æ–∫: {int(success/total_users*100)}%"
    )

    await message.answer(report_message, reply_markup=types.ReplyKeyboardRemove())
    await state.clear()


def register_admin_handlers(dp: Dispatcher):
    dp.message.register(grant_access, Command("g"))
    dp.message.register(revoke_access, Command("revoke"))
    dp.message.register(check_status, Command("status"))
    dp.message.register(help_admin, Command("help"))
    dp.message.register(show_users, Command("users"))
    dp.message.register(start_broadcast, F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
    dp.message.register(process_content, BroadcastStates.waiting_content)
    dp.message.register(confirm_broadcast, BroadcastStates.waiting_confirm)
