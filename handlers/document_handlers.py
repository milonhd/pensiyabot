import logging
import os
import re
import time
import pdfplumber
from aiogram.enums import ChatType
from datetime import datetime
from aiogram import F, Bot, types, Dispatcher
from database import get_user_access, set_user_access, save_receipt, check_duplicate_file
from config import ADMIN_ID, RECEIPT_DIR
from keyboards import materials_keyboard # –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏

logger = logging.getLogger(__name__)

async def parse_kaspi_receipt(pdf_path: str):
    try:
        with pdfplumber.open(pdf_path) as pdf:
            text = "\n".join(page.extract_text() for page in pdf.pages)

            data = {
                "amount": float(re.search(r"(\d+)\s*‚Ç∏", text).group(1)) if re.search(r"(\d+)\s*‚Ç∏", text) else None,
                "iin": re.search(r"–ò–ò–ù/–ë–ò–ù –ø—Ä–æ–¥–∞–≤—Ü–∞\s*(\d+)", text).group(1) if re.search(r"–ò–ò–ù/–ë–ò–ù –ø—Ä–æ–¥–∞–≤—Ü–∞\s*(\d+)", text) else None,
                "check_number": re.search(r"‚Ññ —á–µ–∫–∞\s*(\S+)", text).group(1) if re.search(r"‚Ññ —á–µ–∫–∞\s*(\S+)", text) else None,
                "fp": re.search(r"–§–ü\s*(\d+)", text).group(1) if re.search(r"–§–ü\s*(\d+)", text) else None,
                "date_time": re.search(r"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è\s*(?:–ø–æ –ê—Å—Ç–∞–Ω–µ)?\s*(\d{2}\.\d{2}\.\d{4} \d{2}:\d{2})", text).group(1) if re.search(r"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è\s*(?:–ø–æ –ê—Å—Ç–∞–Ω–µ)?\s*(\d{2}\.\d{2}\.\d{4} \d{2}:\d{2})", text) else None,
                "buyer_name": re.search(r"–§–ò–û –ø–æ–∫—É–ø–∞—Ç–µ–ª—è\s*(.+)", text).group(1).strip() if re.search(r"–§–ò–û –ø–æ–∫—É–ø–∞—Ç–µ–ª—è\s*(.+)", text) else None
            }
            return data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ PDF: {e}")
        return None

@F.document
@F.chat.type == ChatType.PRIVATE
async def handle_document(message: types.Message, bot: Bot):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {message.document.file_name}")
    user = message.from_user

    if not message.document.mime_type == 'application/pdf':
        return await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª —á–µ–∫–∞ –∏–∑ Kaspi")

    file_id = message.document.file_id
    if await check_duplicate_file(file_id):
        return await message.answer("‚ùå –≠—Ç–æ—Ç —á–µ–∫ —É–∂–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω —Ä–∞–Ω–µ–µ")

    file_path = os.path.join(RECEIPT_DIR, f"{user.id}_{message.document.file_name}")
    await bot.download(file=await bot.get_file(file_id), destination=file_path)

    receipt_data = await parse_kaspi_receipt(file_path)

    if not receipt_data:
        return await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —á–µ–∫. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª.")

    required_fields = ["amount", "check_number", "fp", "date_time", "iin", "buyer_name"]
    missing_fields = [field for field in required_fields if receipt_data.get(field) is None]

    if missing_fields:
        return await message.answer(
            f"‚ùå –í —á–µ–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {', '.join(missing_fields)}.\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —á–µ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
        )

    try:
        date_time = datetime.strptime(receipt_data["date_time"], "%d.%m.%Y %H:%M")
    except ValueError as e:
        return await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã —á–µ–∫–∞: {e}")

    await message.answer(
        f"–î–∞–Ω–Ω—ã–µ —á–µ–∫–∞:\n"
        f"–ò–ò–ù: {receipt_data['iin']}\n"
        f"–°—É–º–º–∞: {receipt_data['amount']}\n"
        f"–ù–æ–º–µ—Ä —á–µ–∫–∞: {receipt_data['check_number']}\n"
        f"–î–∞—Ç–∞: {receipt_data['date_time']}"
    )

    expire_time, tariff = await get_user_access(user.id)
    required_amounts = {
        "self": 10000,
        "basic": 50000,
        "pro": 250000,
        "2025": 10000,
        "2026": 10000,
        "2027": 10000,
        "2028": 10000,
        "2029": 10000,
        "2030": 10000,
        "2031": 10000
    }

    errors = []
    if receipt_data["iin"] != "620613400018":
        errors.append("–ò–ò–ù –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")

    if tariff and receipt_data["amount"] != required_amounts.get(tariff, 0):
        errors.append(f"–°—É–º–º–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∞—Ä–∏—Ñ—É {tariff.upper()}")
    elif not tariff:
        errors.append("–¢–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ.")


    if errors:
        return await message.answer("‚ùå –û—à–∏–±–∫–∏ –≤ —á–µ–∫–µ:\n" + "\n".join(errors))

    if not await save_receipt(
        user_id=user.id,
        amount=receipt_data["amount"],
        check_number=receipt_data["check_number"],
        fp=receipt_data["fp"],
        date_time=date_time,
        buyer_name=receipt_data["buyer_name"],
        file_id=file_id
    ):
        return await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–µ–∫–∞")

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–∞
    if tariff in ["self", "basic", "pro"] + [str(y) for y in range(2025, 2032)]:
        duration = {
            "self": 7,
            "basic": 30,
            "pro": 60,
            **{str(y): 7 for y in range(2025, 2032)}
        }.get(tariff, 7) * 86400

        # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω, –Ω–µ –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–∫–∞
        if not expire_time or expire_time <= time.time():
            await set_user_access(user.id, time.time() + duration, tariff)
            await message.answer(
                f"‚úÖ –î–æ—Å—Ç—É–ø —É—Ä–æ–≤–Ω—è {tariff.upper()} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ {duration//86400} –¥–Ω–µ–π!",
                reply_markup=materials_keyboard
            )
        else:
            await message.answer("‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –í–∞—à –¥–æ—Å—Ç—É–ø —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω.")


    info = (
        f"üìÑ –§–∏—Å–∫–∞–ª—å–Ω—ã–π —á–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        f"üÜî ID: {user.id}\n"
        f"üë§ Username: @{user.username or '–ë–µ–∑ username'}\n"
        f"üí≥ –£—Ä–æ–≤–µ–Ω—å: {tariff.upper() if tariff else '–Ω–µ –≤—ã–±—Ä–∞–Ω'}\n"
        f"üìù –§–∞–π–ª: {message.document.file_name}"
    )

    await bot.send_message(ADMIN_ID, info)
    await bot.send_document(ADMIN_ID, message.document.file_id)

def register_document_handlers(dp: Dispatcher):
    dp.message.register(handle_document, F.document)