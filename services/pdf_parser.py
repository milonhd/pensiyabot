import logging
import re
from datetime import datetime
import pdfplumber

logger = logging.getLogger(__name__)

async def parse_kaspi_receipt(pdf_path: str):
    """
    –ü–∞—Ä—Å–∏—Ç PDF-—Ñ–∞–π–ª —Ñ–∏—Å–∫–∞–ª—å–Ω–æ–≥–æ —á–µ–∫–∞ Kaspi –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
    
    Args:
        pdf_path (str): –ü—É—Ç—å –∫ PDF-—Ñ–∞–π–ª—É —á–µ–∫–∞
        
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        with pdfplumber.open(pdf_path) as pdf:
            text = "\n".join(page.extract_text() for page in pdf.pages)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
            data = {
                "amount": float(re.search(r"(\d+)\s*‚Ç∏", text).group(1)) if re.search(r"(\d+)\s*‚Ç∏", text) else None,
                "iin": re.search(r"–ò–ò–ù/–ë–ò–ù –ø—Ä–æ–¥–∞–≤—Ü–∞\s*(\d+)", text).group(1) if re.search(r"–ò–ò–ù/–ë–ò–ù –ø—Ä–æ–¥–∞–≤—Ü–∞\s*(\d+)", text) else None,
                "check_number": re.search(r"‚Ññ —á–µ–∫–∞\s*(\S+)", text).group(1) if re.search(r"‚Ññ —á–µ–∫–∞\s*(\S+)", text) else None,
                "fp": re.search(r"–§–ü\s*(\d+)", text).group(1) if re.search(r"–§–ü\s*(\d+)", text) else None,
                "date_time": re.search(r"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è\s*(?:–ø–æ –ê—Å—Ç–∞–Ω–µ)?\s*(\d{2}\.\d{2}\.\d{4} \d{2}:\d{2})", text).group(1) 
                            if re.search(r"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è\s*(?:–ø–æ –ê—Å—Ç–∞–Ω–µ)?\s*(\d{2}\.\d{2}\.\d{4} \d{2}:\d{2})", text) else None,
                "buyer_name": re.search(r"–§–ò–û –ø–æ–∫—É–ø–∞—Ç–µ–ª—è\s*(.+)", text).group(1).strip() 
                              if re.search(r"–§–ò–û –ø–æ–∫—É–ø–∞—Ç–µ–ª—è\s*(.+)", text) else None
            }
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            required_fields = ["amount", "check_number", "fp", "date_time", "iin"]
            for field in required_fields:
                if data[field] is None:
                    logger.warning(f"–í —á–µ–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
            
            return data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ PDF: {e}")
        return None

def validate_receipt_data(data, required_amount=None, required_iin="620613400018"):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
    
    Args:
        data (dict): –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —á–µ–∫–∞
        required_amount (float, optional): –¢—Ä–µ–±—É–µ–º–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
        required_iin (str, optional): –¢—Ä–µ–±—É–µ–º—ã–π –ò–ò–ù/–ë–ò–ù –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        
    Returns:
        tuple: (bool, list) - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫
    """
    if not data:
        return False, ["–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞"]
    
    errors = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–ò–ù/–ë–ò–ù
    if data.get("iin") != required_iin:
        errors.append("–ò–ò–ù –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã, –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞
    if required_amount is not None and data.get("amount") != required_amount:
        errors.append(f"–°—É–º–º–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±—É–µ–º–æ–π ({required_amount})")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥—Ä—É–≥–∏—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    required_fields = ["check_number", "fp", "date_time"]
    for field in required_fields:
        if not data.get(field):
            errors.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ {field}")
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞
    if data.get("date_time"):
        try:
            datetime.strptime(data["date_time"], "%d.%m.%Y %H:%M")
        except ValueError:
            errors.append("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
    
    return len(errors) == 0, errors

def format_receipt_info(data):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    Args:
        data (dict): –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —á–µ–∫–∞
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    """
    if not data:
        return "–î–∞–Ω–Ω—ã–µ —á–µ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        
    info = f"üìù –î–∞–Ω–Ω—ã–µ —á–µ–∫–∞:\n"
    
    if data.get("iin"):
        info += f"–ò–ò–ù/–ë–ò–ù: {data['iin']}\n"
    
    if data.get("amount"):
        info += f"–°—É–º–º–∞: {data['amount']} ‚Ç∏\n"
    
    if data.get("check_number"):
        info += f"–ù–æ–º–µ—Ä —á–µ–∫–∞: {data['check_number']}\n"
    
    if data.get("date_time"):
        info += f"–î–∞—Ç–∞: {data['date_time']}\n"
    
    if data.get("buyer_name"):
        info += f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {data['buyer_name']}\n"
        
    return info
