import logging
import asyncio
import time
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from database.operations import (
    get_all_active_users,
    get_expired_users,
    delete_user_access
)
from config import ADMIN_ID, GROUP_IDS

logger = logging.getLogger(__name__)

class SchedulerService:
    def __init__(self, bot):
        self.bot = bot
        self.scheduler = AsyncIOScheduler(timezone="UTC")
        
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –¥–æ—Å—Ç—É–ø–æ–≤
        self.scheduler.add_job(
            self.check_access_periodically,
            'interval',
            seconds=10,
            id='check_access'
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞ –¥–æ—Å—Ç—É–ø–∞
        self.scheduler.add_job(
            self.check_subscriptions,
            'interval', 
            hours=1,
            id='check_subscriptions'
        )
        
        self.scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω")
    
    def shutdown(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self.scheduler.shutdown()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def check_access_periodically(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –¥–æ—Å—Ç—É–ø—ã –∏ —É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –≥—Ä—É–ø–ø"""
        try:
            expired_users = await get_expired_users()

            for user_id, tariff in expired_users:
                # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø
                for group_id in GROUP_IDS:
                    try:
                        await self.bot.ban_chat_member(group_id, user_id)  # –±–∞–Ω
                        await self.bot.unban_chat_member(group_id, user_id)  # —Å—Ä–∞–∑—É —Ä–∞–∑–±–∞–Ω, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è
                        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã {group_id}")
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ –≥—Ä—É–ø–ø—ã {group_id}: {e}")

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    await self.bot.send_message(user_id, "‚ùå –í–∞—à –¥–æ—Å—Ç—É–ø –∏—Å—Ç—ë–∫. –í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –≥—Ä—É–ø–ø—ã.")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                try:
                    await self.bot.send_message(
                        ADMIN_ID,
                        f"‚õîÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ –≥—Ä—É–ø–ø, –¥–æ—Å—Ç—É–ø –∏—Å—Ç—ë–∫ ({tariff})."
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

                # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                await delete_user_access(user_id)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞: {e}")

    async def check_subscriptions(self):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            users = await get_all_active_users()
            for user_id, expire_time, _ in users:
                if (expire_time - time.time()) < 86400 * 3:  # –ó–∞ 3 –¥–Ω—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
                    await self.bot.send_message(
                        user_id,
                        f"‚ö†Ô∏è –í–∞—à –¥–æ—Å—Ç—É–ø –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è!"
                    )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")

    async def execute_scheduled_broadcast(self, content: dict, recipients=None):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É"""
        from database.operations import get_all_users
        
        users = recipients if recipients else await get_all_users()
        
        success = 0
        errors = 0
        
        for user_id in users:
            try:
                if content.get('photo'):
                    await self.bot.send_photo(
                        chat_id=user_id,
                        photo=content['photo'],
                        caption=content.get('text', ''),
                        parse_mode='HTML'
                    )
                elif content.get('video'):
                    await self.bot.send_video(
                        chat_id=user_id,
                        video=content['video'],
                        caption=content.get('text', ''),
                        parse_mode='HTML'
                    )
                elif content.get('document'):
                    await self.bot.send_document(
                        chat_id=user_id,
                        document=content['document'],
                        caption=content.get('text', ''),
                        parse_mode='HTML'
                    )
                else:
                    await self.bot.send_message(
                        chat_id=user_id,
                        text=content.get('text', ''),
                        parse_mode='HTML'
                    )
                
                success += 1
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–∏–º–∏—Ç–æ–≤ Telegram
                await asyncio.sleep(0.05)
                
            except Exception as e:
                errors += 1
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                await asyncio.sleep(1)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É –ø–æ–¥–æ–ª—å—à–µ
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É
        report_message = (
            f"üìä –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {errors}\n"
            f"üìà –£—Å–ø–µ—à–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–æ–∫: {int(success/len(users)*100 if users else 0)}%"
        )
        
        await self.bot.send_message(ADMIN_ID, report_message)
    
    def schedule_broadcast(self, content: dict, scheduled_time=None, recipients=None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á—É –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        if scheduled_time:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            job_id = f"broadcast_{datetime.now().strftime('%Y%m%d%H%M%S')}"
            self.scheduler.add_job(
                self.execute_scheduled_broadcast,
                'date',
                run_date=scheduled_time,
                args=[content, recipients],
                id=job_id
            )
            return job_id
        else:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
            asyncio.create_task(self.execute_scheduled_broadcast(content, recipients))
            return None
